/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;
  this.name     = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = "",
              i;

          for (i = 0; i < expectation.parts.length; i++) {
            escapedParts += expectation.parts[i] instanceof Array
              ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
              : classEscape(expectation.parts[i]);
          }

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g,  '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g,  '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = new Array(expected.length),
        i, j;

    for (i = 0; i < expected.length; i++) {
      descriptions[i] = describeExpectation(expected[i]);
    }

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== void 0 ? options : {};

  var peg$FAILED = {},

      peg$startRuleIndices = { Document: 0 },
      peg$startRuleIndex   = 0,

      peg$consts = [
        function(value) { return { term: 'fsl_parse_tree', value, location: location() }; },
        "machine_author",
        peg$literalExpectation("machine_author", false),
        "machine_contributor",
        peg$literalExpectation("machine_contributor", false),
        "machine_comment",
        peg$literalExpectation("machine_comment", false),
        "machine_reference",
        peg$literalExpectation("machine_reference", false),
        ":",
        peg$literalExpectation(":", false),
        ";",
        peg$literalExpectation(";", false),
        function(term, value) {
            return { term, value, location: location() };
          },
        "machine_name",
        peg$literalExpectation("machine_name", false),
        "machine_language",
        peg$literalExpectation("machine_language", false),
        "machine_version",
        peg$literalExpectation("machine_version", false),
        "fsl_version",
        peg$literalExpectation("fsl_version", false),
        "machine_definition",
        peg$literalExpectation("machine_definition", false),
        function(definition) {
            return { term: "machine_definition", value: definition, location: location() };
          },
        "machine_license",
        peg$literalExpectation("machine_license", false),
        function(license) {
            return { term: "machine_license", value: license, location: location() };
          },
        peg$otherExpectation("machine attribute"),
        function(r_action, r_prob, l_desc, arrow, r_desc, l_prob, l_action, label, tail) {

              // this changed kind to key.  some breakage may result?
              const base = { term: 'transition-se', key: arrow, to: label, location: location() };

              if (tail && (tail !== [])) { base.se            = tail;         }
              if (l_desc)                { base.l_desc        = l_desc;       }
              if (r_desc)                { base.r_desc        = r_desc;       }
              if (l_action)              { base.l_action      = l_action;     }
              if (r_action)              { base.r_action      = r_action;     }
              if (l_prob)                { base.l_probability = l_prob.value; }
              if (r_prob)                { base.r_probability = r_prob.value; }

              return base;

            },
        function(label, se) {
            return {
            	term: 'transition',
            	from: label,
            	se: (se && (se !== []))? se : undefined,
            	location: location()
            };
          },
        /^[\n\r\u2028\u2029]/,
        peg$classExpectation(["\n", "\r", "\u2028", "\u2029"], false, false),
        "*/",
        peg$literalExpectation("*/", false),
        peg$anyExpectation(),
        peg$otherExpectation("block comment"),
        "/*",
        peg$literalExpectation("/*", false),
        peg$otherExpectation("line comment"),
        "//",
        peg$literalExpectation("//", false),
        peg$otherExpectation("whitespace"),
        function(ws) { return { term: 'whitespace', value: ws, location: location() }; },
        /^[ \t\r\n\x0B]/,
        peg$classExpectation([" ", "\t", "\r", "\n", "\x0B"], false, false),
        "hsts",
        peg$literalExpectation("hsts", false),
        "http",
        peg$literalExpectation("http", false),
        "https",
        peg$literalExpectation("https", false),
        "hxxp",
        peg$literalExpectation("hxxp", false),
        "hxxps",
        peg$literalExpectation("hxxps", false),
        "shttp",
        peg$literalExpectation("shttp", false),
        "ftp",
        peg$literalExpectation("ftp", false),
        "sftp",
        peg$literalExpectation("sftp", false),
        "rsync",
        peg$literalExpectation("rsync", false),
        "tftp",
        peg$literalExpectation("tftp", false),
        "git",
        peg$literalExpectation("git", false),
        "svn",
        peg$literalExpectation("svn", false),
        "file",
        peg$literalExpectation("file", false),
        "filesystem",
        peg$literalExpectation("filesystem", false),
        "res",
        peg$literalExpectation("res", false),
        "resource",
        peg$literalExpectation("resource", false),
        "appdata",
        peg$literalExpectation("appdata", false),
        "data",
        peg$literalExpectation("data", false),
        "redis",
        peg$literalExpectation("redis", false),
        "service",
        peg$literalExpectation("service", false),
        peg$otherExpectation("url"),
        /^[a-zA-Z0-9!*'():;@&=+$,\/?#[\]_.~\-]/,
        peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "!", "*", "'", "(", ")", ":", ";", "@", "&", "=", "+", "$", ",", "/", "?", "#", "[", "]", "_", ".", "~", "-"], false, false),
        function(protocol) {
          	return { term: "url", protocol, value: text(), location: location() };
          },
        peg$otherExpectation("gviz layout_type"),
        "dot",
        peg$literalExpectation("dot", false),
        function() { return { term: "layout_type", value: "dot",   location: location() }; },
        "circo",
        peg$literalExpectation("circo", false),
        function() { return { term: "layout_type", value: "circo", location: location() }; },
        "fdp",
        peg$literalExpectation("fdp", false),
        function() { return { term: "layout_type", value: "fdp",   location: location() }; },
        "neato",
        peg$literalExpectation("neato", false),
        function() { return { term: "layout_type", value: "neato", location: location() }; },
        peg$otherExpectation("graph layout"),
        "graph_layout",
        peg$literalExpectation("graph_layout", false),
        function(value) { return { term: "Graph Layout", value, location: location() }; },
        "\"",
        peg$literalExpectation("\"", false),
        "\\",
        peg$literalExpectation("\\", false),
        "/",
        peg$literalExpectation("/", false),
        "b",
        peg$literalExpectation("b", false),
        function() { return "\b"; },
        "f",
        peg$literalExpectation("f", false),
        function() { return "\f"; },
        "n",
        peg$literalExpectation("n", false),
        function() { return "\n"; },
        "r",
        peg$literalExpectation("r", false),
        function() { return "\r"; },
        "t",
        peg$literalExpectation("t", false),
        function() { return "\t"; },
        "v",
        peg$literalExpectation("v", false),
        function() { return "\v"; },
        "u",
        peg$literalExpectation("u", false),
        function(digits) {
                  return String.fromCharCode(parseInt(digits, 16));
                },
        function(Sequence) { return Sequence; },
        /^[ -!#-[\]-\u10FFFF]/,
        peg$classExpectation([[" ", "!"], ["#", "["], ["]", "\u10FF"], "F", "F"], false, false),
        "'",
        peg$literalExpectation("'", false),
        /^[ -&(-[\]-\u10FFFF]/,
        peg$classExpectation([[" ", "&"], ["(", "["], ["]", "\u10FF"], "F", "F"], false, false),
        peg$otherExpectation("action label"),
        function(chars) { return chars.join(""); },
        peg$otherExpectation("string"),
        function(chars) {
            return { type: "label", written_as: "string", value: chars.join(""), location: location() };
          },
        /^[0-9a-zA-Z._!$\^*!?,\x80-\u2189\u2195-\u2199\u219C-\u21AD\u21AF-\u21C9\u21D5-\uFFFF]/,
        peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], ".", "_", "!", "$", "^", "*", "!", "?", ",", ["\x80", "\u2189"], ["\u2195", "\u2199"], ["\u219C", "\u21AD"], ["\u21AF", "\u21C9"], ["\u21D5", "\uFFFF"]], false, false),
        /^[0-9a-zA-Z.+_\^()*&$#@!?,\x80-\u2189\u2195-\u2199\u219C-\u21AD\u21AF-\u21C9\u21D5-\uFFFF]/,
        peg$classExpectation([["0", "9"], ["a", "z"], ["A", "Z"], ".", "+", "_", "^", "(", ")", "*", "&", "$", "#", "@", "!", "?", ",", ["\x80", "\u2189"], ["\u2195", "\u2199"], ["\u219C", "\u21AD"], ["\u21AF", "\u21C9"], ["\u21D5", "\uFFFF"]], false, false),
        peg$otherExpectation("atom"),
        function(firstletter, text) {
              const value = firstletter + ((text || []).join(''));
              return { type: "label", written_as: "atom", value, location: location() };
            },
        peg$otherExpectation("label"),
        peg$otherExpectation("label list"),
        "[",
        peg$literalExpectation("[", false),
        "]",
        peg$literalExpectation("]", false),
        function(names) {
            return { type: "label_list", value: names.map(i => i[0]), location: location() };
          },
        peg$otherExpectation("label or label list"),
        peg$otherExpectation("license"),
        "MIT",
        peg$literalExpectation("MIT", false),
        function() { return { term: 'license', value: 'MIT',           known: true,  viral: false,     location: location() }; },
        "BSD 2-clause",
        peg$literalExpectation("BSD 2-clause", false),
        function() { return { term: 'license', value: 'BSD 2-clause',  known: true,  viral: false,     location: location() }; },
        "BSD 3-clause",
        peg$literalExpectation("BSD 3-clause", false),
        function() { return { term: 'license', value: 'BSD 3-clause',  known: true,  viral: false,     location: location() }; },
        "Apache 2.0",
        peg$literalExpectation("Apache 2.0", false),
        function() { return { term: 'license', value: 'Apache 2.0',    known: true,  viral: false,     location: location() }; },
        "Mozilla 2.0",
        peg$literalExpectation("Mozilla 2.0", false),
        function() { return { term: 'license', value: 'Mozilla 2.0',   known: true,  viral: false,     location: location() }; },
        "Public domain",
        peg$literalExpectation("Public domain", false),
        function() { return { term: 'license', value: 'Public domain', known: true,  viral: false,     location: location() }; },
        "GPL v2",
        peg$literalExpectation("GPL v2", false),
        function() { return { term: 'license', value: 'GPL v2',        known: true,  viral: true,      location: location() }; },
        "GPL v3",
        peg$literalExpectation("GPL v3", false),
        function() { return { term: 'license', value: 'GPV v3',        known: true,  viral: true,      location: location() }; },
        "LGPL v2.1",
        peg$literalExpectation("LGPL v2.1", false),
        function() { return { term: 'license', value: 'LGPL v2.1',     known: true,  viral: true,      location: location() }; },
        "LGPL v3.0",
        peg$literalExpectation("LGPL v3.0", false),
        function() { return { term: 'license', value: 'LGPL v3.0',     known: true,  viral: true,      location: location() }; },
        "Unknown license",
        peg$literalExpectation("Unknown license", false),
        function() { return { term: 'license', value: undefined,       known: false, viral: undefined, location: location() }; },
        "License ",
        peg$literalExpectation("License ", false),
        function(custom) { return { term: 'license', value: custom,          known: true,  viral: undefined, location: location() }; },
        /^[0-9a-fA-F]/,
        peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
        /^[0-9]/,
        peg$classExpectation([["0", "9"]], false, false),
        /^[1-9]/,
        peg$classExpectation([["1", "9"]], false, false),
        peg$otherExpectation("integer literal"),
        "0",
        peg$literalExpectation("0", false),
        function() { return { term: 'Number', value: 0,                  location: location() }; },
        function() { return { term: 'Number', value: parseFloat(text()), location: location() }; },
        peg$otherExpectation("nonneg number"),
        ".",
        peg$literalExpectation(".", false),
        function(major, minor, patch) {
            const pmajor = parseInt(major.value, 10),
                  pminor = parseInt(minor.value, 10),
                  ppatch = parseInt(patch.value, 10);

            return {
              term   : 'semver',

              major  : pmajor,
              minor  : pminor,
              patch  : ppatch,

              parsed : [pmajor, pminor, ppatch],

              value  : text()
            };
          },
        "^",
        peg$literalExpectation("^", false),
        "~",
        peg$literalExpectation("~", false),
        ">=",
        peg$literalExpectation(">=", false),
        "<=",
        peg$literalExpectation("<=", false),
        "<",
        peg$literalExpectation("<", false),
        ">",
        peg$literalExpectation(">", false),
        peg$otherExpectation("named color"),
        "aliceblue",
        peg$literalExpectation("aliceblue", false),
        function() { return { term: 'color', value: 'f0f8ffff', value6: 'f0f8ff', location: location() }; },
        "AliceBlue",
        peg$literalExpectation("AliceBlue", false),
        "antiquewhite",
        peg$literalExpectation("antiquewhite", false),
        function() { return { term: 'color', value: 'faebd7ff', value6: 'faebd7', location: location() }; },
        "AntiqueWhite",
        peg$literalExpectation("AntiqueWhite", false),
        "aqua",
        peg$literalExpectation("aqua", false),
        function() { return { term: 'color', value: '00ffffff', value6: '00ffff', location: location() }; },
        "Aqua",
        peg$literalExpectation("Aqua", false),
        "aquamarine",
        peg$literalExpectation("aquamarine", false),
        function() { return { term: 'color', value: '7fffd4ff', value6: '7fffd4', location: location() }; },
        "Aquamarine",
        peg$literalExpectation("Aquamarine", false),
        "azure",
        peg$literalExpectation("azure", false),
        function() { return { term: 'color', value: 'f0ffffff', value6: 'f0ffff', location: location() }; },
        "Azure",
        peg$literalExpectation("Azure", false),
        "beige",
        peg$literalExpectation("beige", false),
        function() { return { term: 'color', value: 'f5f5dcff', value6: 'f5f5dc', location: location() }; },
        "Beige",
        peg$literalExpectation("Beige", false),
        "bisque",
        peg$literalExpectation("bisque", false),
        function() { return { term: 'color', value: 'ffe4c4ff', value6: 'ffe4c4', location: location() }; },
        "Bisque",
        peg$literalExpectation("Bisque", false),
        "black",
        peg$literalExpectation("black", false),
        function() { return { term: 'color', value: '000000ff', value6: '000000', location: location() }; },
        "Black",
        peg$literalExpectation("Black", false),
        "blanchedalmond",
        peg$literalExpectation("blanchedalmond", false),
        function() { return { term: 'color', value: 'ffebcdff', value6: 'ffebcd', location: location() }; },
        "BlanchedAlmond",
        peg$literalExpectation("BlanchedAlmond", false),
        "blue",
        peg$literalExpectation("blue", false),
        function() { return { term: 'color', value: '0000ffff', value6: '0000ff', location: location() }; },
        "Blue",
        peg$literalExpectation("Blue", false),
        "blueviolet",
        peg$literalExpectation("blueviolet", false),
        function() { return { term: 'color', value: '8a2be2ff', value6: '8a2be2', location: location() }; },
        "BlueViolet",
        peg$literalExpectation("BlueViolet", false),
        "brown",
        peg$literalExpectation("brown", false),
        function() { return { term: 'color', value: 'a52a2aff', value6: 'a52a2a', location: location() }; },
        "Brown",
        peg$literalExpectation("Brown", false),
        "burlywood",
        peg$literalExpectation("burlywood", false),
        function() { return { term: 'color', value: 'deb887ff', value6: 'deb887', location: location() }; },
        "BurlyWood",
        peg$literalExpectation("BurlyWood", false),
        "cadetblue",
        peg$literalExpectation("cadetblue", false),
        function() { return { term: 'color', value: '5f9ea0ff', value6: '5f9ea0', location: location() }; },
        "CadetBlue",
        peg$literalExpectation("CadetBlue", false),
        "chartreuse",
        peg$literalExpectation("chartreuse", false),
        function() { return { term: 'color', value: '7fff00ff', value6: '7fff00', location: location() }; },
        "Chartreuse",
        peg$literalExpectation("Chartreuse", false),
        "chocolate",
        peg$literalExpectation("chocolate", false),
        function() { return { term: 'color', value: 'd2691eff', value6: 'd2691e', location: location() }; },
        "Chocolate",
        peg$literalExpectation("Chocolate", false),
        "coral",
        peg$literalExpectation("coral", false),
        function() { return { term: 'color', value: 'ff7f50ff', value6: 'ff7f50', location: location() }; },
        "Coral",
        peg$literalExpectation("Coral", false),
        "cornflowerblue",
        peg$literalExpectation("cornflowerblue", false),
        function() { return { term: 'color', value: '6495edff', value6: '6495ed', location: location() }; },
        "CornflowerBlue",
        peg$literalExpectation("CornflowerBlue", false),
        "cornsilk",
        peg$literalExpectation("cornsilk", false),
        function() { return { term: 'color', value: 'fff8dcff', value6: 'fff8dc', location: location() }; },
        "Cornsilk",
        peg$literalExpectation("Cornsilk", false),
        "crimson",
        peg$literalExpectation("crimson", false),
        function() { return { term: 'color', value: 'dc143cff', value6: 'dc143c', location: location() }; },
        "Crimson",
        peg$literalExpectation("Crimson", false),
        "cyan",
        peg$literalExpectation("cyan", false),
        "Cyan",
        peg$literalExpectation("Cyan", false),
        "darkblue",
        peg$literalExpectation("darkblue", false),
        function() { return { term: 'color', value: '00008bff', value6: '00008b', location: location() }; },
        "DarkBlue",
        peg$literalExpectation("DarkBlue", false),
        "darkcyan",
        peg$literalExpectation("darkcyan", false),
        function() { return { term: 'color', value: '008b8bff', value6: '008b8b', location: location() }; },
        "DarkCyan",
        peg$literalExpectation("DarkCyan", false),
        "darkgoldenrod",
        peg$literalExpectation("darkgoldenrod", false),
        function() { return { term: 'color', value: 'b8860bff', value6: 'b8860b', location: location() }; },
        "DarkGoldenRod",
        peg$literalExpectation("DarkGoldenRod", false),
        "darkgray",
        peg$literalExpectation("darkgray", false),
        function() { return { term: 'color', value: 'a9a9a9ff', value6: 'a9a9a9', location: location() }; },
        "DarkGray",
        peg$literalExpectation("DarkGray", false),
        "darkgrey",
        peg$literalExpectation("darkgrey", false),
        "DarkGrey",
        peg$literalExpectation("DarkGrey", false),
        "darkgreen",
        peg$literalExpectation("darkgreen", false),
        function() { return { term: 'color', value: '006400ff', value6: '006400', location: location() }; },
        "DarkGreen",
        peg$literalExpectation("DarkGreen", false),
        "darkkhaki",
        peg$literalExpectation("darkkhaki", false),
        function() { return { term: 'color', value: 'bdb76bff', value6: 'bdb76b', location: location() }; },
        "DarkKhaki",
        peg$literalExpectation("DarkKhaki", false),
        "darkmagenta",
        peg$literalExpectation("darkmagenta", false),
        function() { return { term: 'color', value: '8b008bff', value6: '8b008b', location: location() }; },
        "DarkMagenta",
        peg$literalExpectation("DarkMagenta", false),
        "darkolivegreen",
        peg$literalExpectation("darkolivegreen", false),
        function() { return { term: 'color', value: '556b2fff', value6: '556b2f', location: location() }; },
        "DarkOliveGreen",
        peg$literalExpectation("DarkOliveGreen", false),
        "darkorange",
        peg$literalExpectation("darkorange", false),
        function() { return { term: 'color', value: 'ff8c00ff', value6: 'ff8c00', location: location() }; },
        "Darkorange",
        peg$literalExpectation("Darkorange", false),
        "darkorchid",
        peg$literalExpectation("darkorchid", false),
        function() { return { term: 'color', value: '9932ccff', value6: '9932cc', location: location() }; },
        "DarkOrchid",
        peg$literalExpectation("DarkOrchid", false),
        "darkred",
        peg$literalExpectation("darkred", false),
        function() { return { term: 'color', value: '8b0000ff', value6: '8b0000', location: location() }; },
        "DarkRed",
        peg$literalExpectation("DarkRed", false),
        "darksalmon",
        peg$literalExpectation("darksalmon", false),
        function() { return { term: 'color', value: 'e9967aff', value6: 'e9967a', location: location() }; },
        "DarkSalmon",
        peg$literalExpectation("DarkSalmon", false),
        "darkseagreen",
        peg$literalExpectation("darkseagreen", false),
        function() { return { term: 'color', value: '8fbc8fff', value6: '8fbc8f', location: location() }; },
        "DarkSeaGreen",
        peg$literalExpectation("DarkSeaGreen", false),
        "darkslateblue",
        peg$literalExpectation("darkslateblue", false),
        function() { return { term: 'color', value: '483d8bff', value6: '483d8b', location: location() }; },
        "DarkSlateBlue",
        peg$literalExpectation("DarkSlateBlue", false),
        "darkslategray",
        peg$literalExpectation("darkslategray", false),
        function() { return { term: 'color', value: '2f4f4fff', value6: '2f4f4f', location: location() }; },
        "DarkSlateGray",
        peg$literalExpectation("DarkSlateGray", false),
        "darkslategrey",
        peg$literalExpectation("darkslategrey", false),
        "DarkSlateGrey",
        peg$literalExpectation("DarkSlateGrey", false),
        "darkturquoise",
        peg$literalExpectation("darkturquoise", false),
        function() { return { term: 'color', value: '00ced1ff', value6: '00ced1', location: location() }; },
        "DarkTurquoise",
        peg$literalExpectation("DarkTurquoise", false),
        "darkviolet",
        peg$literalExpectation("darkviolet", false),
        function() { return { term: 'color', value: '9400d3ff', value6: '9400d3', location: location() }; },
        "DarkViolet",
        peg$literalExpectation("DarkViolet", false),
        "deeppink",
        peg$literalExpectation("deeppink", false),
        function() { return { term: 'color', value: 'ff1493ff', value6: 'ff1493', location: location() }; },
        "DeepPink",
        peg$literalExpectation("DeepPink", false),
        "deepskyblue",
        peg$literalExpectation("deepskyblue", false),
        function() { return { term: 'color', value: '00bfffff', value6: '00bfff', location: location() }; },
        "DeepSkyBlue",
        peg$literalExpectation("DeepSkyBlue", false),
        "dimgray",
        peg$literalExpectation("dimgray", false),
        function() { return { term: 'color', value: '696969ff', value6: '696969', location: location() }; },
        "DimGray",
        peg$literalExpectation("DimGray", false),
        "dimgrey",
        peg$literalExpectation("dimgrey", false),
        "DimGrey",
        peg$literalExpectation("DimGrey", false),
        "dodgerblue",
        peg$literalExpectation("dodgerblue", false),
        function() { return { term: 'color', value: '1e90ffff', value6: '1e90ff', location: location() }; },
        "DodgerBlue",
        peg$literalExpectation("DodgerBlue", false),
        "firebrick",
        peg$literalExpectation("firebrick", false),
        function() { return { term: 'color', value: 'b22222ff', value6: 'b22222', location: location() }; },
        "FireBrick",
        peg$literalExpectation("FireBrick", false),
        "floralwhite",
        peg$literalExpectation("floralwhite", false),
        function() { return { term: 'color', value: 'fffaf0ff', value6: 'fffaf0', location: location() }; },
        "FloralWhite",
        peg$literalExpectation("FloralWhite", false),
        "forestgreen",
        peg$literalExpectation("forestgreen", false),
        function() { return { term: 'color', value: '228b22ff', value6: '228b22', location: location() }; },
        "ForestGreen",
        peg$literalExpectation("ForestGreen", false),
        "fuchsia",
        peg$literalExpectation("fuchsia", false),
        function() { return { term: 'color', value: 'ff00ffff', value6: 'ff00ff', location: location() }; },
        "Fuchsia",
        peg$literalExpectation("Fuchsia", false),
        "gainsboro",
        peg$literalExpectation("gainsboro", false),
        function() { return { term: 'color', value: 'dcdcdcff', value6: 'dcdcdc', location: location() }; },
        "Gainsboro",
        peg$literalExpectation("Gainsboro", false),
        "ghostwhite",
        peg$literalExpectation("ghostwhite", false),
        function() { return { term: 'color', value: 'f8f8ffff', value6: 'f8f8ff', location: location() }; },
        "GhostWhite",
        peg$literalExpectation("GhostWhite", false),
        "gold",
        peg$literalExpectation("gold", false),
        function() { return { term: 'color', value: 'ffd700ff', value6: 'ffd700', location: location() }; },
        "Gold",
        peg$literalExpectation("Gold", false),
        "goldenrod",
        peg$literalExpectation("goldenrod", false),
        function() { return { term: 'color', value: 'daa520ff', value6: 'daa520', location: location() }; },
        "GoldenRod",
        peg$literalExpectation("GoldenRod", false),
        "gray",
        peg$literalExpectation("gray", false),
        function() { return { term: 'color', value: '808080ff', value6: '808080', location: location() }; },
        "Gray",
        peg$literalExpectation("Gray", false),
        "grey",
        peg$literalExpectation("grey", false),
        "Grey",
        peg$literalExpectation("Grey", false),
        "green",
        peg$literalExpectation("green", false),
        function() { return { term: 'color', value: '008000ff', value6: '008000', location: location() }; },
        "Green",
        peg$literalExpectation("Green", false),
        "greenyellow",
        peg$literalExpectation("greenyellow", false),
        function() { return { term: 'color', value: 'adff2fff', value6: 'adff2f', location: location() }; },
        "GreenYellow",
        peg$literalExpectation("GreenYellow", false),
        "honeydew",
        peg$literalExpectation("honeydew", false),
        function() { return { term: 'color', value: 'f0fff0ff', value6: 'f0fff0', location: location() }; },
        "HoneyDew",
        peg$literalExpectation("HoneyDew", false),
        "hotpink",
        peg$literalExpectation("hotpink", false),
        function() { return { term: 'color', value: 'ff69b4ff', value6: 'ff69b4', location: location() }; },
        "HotPink",
        peg$literalExpectation("HotPink", false),
        "indianred",
        peg$literalExpectation("indianred", false),
        function() { return { term: 'color', value: 'cd5c5cff', value6: 'cd5c5c', location: location() }; },
        "IndianRed",
        peg$literalExpectation("IndianRed", false),
        "indigo",
        peg$literalExpectation("indigo", false),
        function() { return { term: 'color', value: '4b0082ff', value6: '4b0082', location: location() }; },
        "Indigo",
        peg$literalExpectation("Indigo", false),
        "ivory",
        peg$literalExpectation("ivory", false),
        function() { return { term: 'color', value: 'fffff0ff', value6: 'fffff0', location: location() }; },
        "Ivory",
        peg$literalExpectation("Ivory", false),
        "khaki",
        peg$literalExpectation("khaki", false),
        function() { return { term: 'color', value: 'f0e68cff', value6: 'f0e68c', location: location() }; },
        "Khaki",
        peg$literalExpectation("Khaki", false),
        "lavender",
        peg$literalExpectation("lavender", false),
        function() { return { term: 'color', value: 'e6e6faff', value6: 'e6e6fa', location: location() }; },
        "Lavender",
        peg$literalExpectation("Lavender", false),
        "lavenderblush",
        peg$literalExpectation("lavenderblush", false),
        function() { return { term: 'color', value: 'fff0f5ff', value6: 'fff0f5', location: location() }; },
        "LavenderBlush",
        peg$literalExpectation("LavenderBlush", false),
        "lawngreen",
        peg$literalExpectation("lawngreen", false),
        function() { return { term: 'color', value: '7cfc00ff', value6: '7cfc00', location: location() }; },
        "LawnGreen",
        peg$literalExpectation("LawnGreen", false),
        "lemonchiffon",
        peg$literalExpectation("lemonchiffon", false),
        function() { return { term: 'color', value: 'fffacdff', value6: 'fffacd', location: location() }; },
        "LemonChiffon",
        peg$literalExpectation("LemonChiffon", false),
        "lightblue",
        peg$literalExpectation("lightblue", false),
        function() { return { term: 'color', value: 'add8e6ff', value6: 'add8e6', location: location() }; },
        "LightBlue",
        peg$literalExpectation("LightBlue", false),
        "lightcoral",
        peg$literalExpectation("lightcoral", false),
        function() { return { term: 'color', value: 'f08080ff', value6: 'f08080', location: location() }; },
        "LightCoral",
        peg$literalExpectation("LightCoral", false),
        "lightcyan",
        peg$literalExpectation("lightcyan", false),
        function() { return { term: 'color', value: 'e0ffffff', value6: 'e0ffff', location: location() }; },
        "LightCyan",
        peg$literalExpectation("LightCyan", false),
        "lightgoldenrodyellow",
        peg$literalExpectation("lightgoldenrodyellow", false),
        function() { return { term: 'color', value: 'fafad2ff', value6: 'fafad2', location: location() }; },
        "LightGoldenRodYellow",
        peg$literalExpectation("LightGoldenRodYellow", false),
        "lightgray",
        peg$literalExpectation("lightgray", false),
        function() { return { term: 'color', value: 'd3d3d3ff', value6: 'd3d3d3', location: location() }; },
        "LightGray",
        peg$literalExpectation("LightGray", false),
        "lightgrey",
        peg$literalExpectation("lightgrey", false),
        "LightGrey",
        peg$literalExpectation("LightGrey", false),
        "lightgreen",
        peg$literalExpectation("lightgreen", false),
        function() { return { term: 'color', value: '90ee90ff', value6: '90ee90', location: location() }; },
        "LightGreen",
        peg$literalExpectation("LightGreen", false),
        "lightpink",
        peg$literalExpectation("lightpink", false),
        function() { return { term: 'color', value: 'ffb6c1ff', value6: 'ffb6c1', location: location() }; },
        "LightPink",
        peg$literalExpectation("LightPink", false),
        "lightsalmon",
        peg$literalExpectation("lightsalmon", false),
        function() { return { term: 'color', value: 'ffa07aff', value6: 'ffa07a', location: location() }; },
        "LightSalmon",
        peg$literalExpectation("LightSalmon", false),
        "lightseagreen",
        peg$literalExpectation("lightseagreen", false),
        function() { return { term: 'color', value: '20b2aaff', value6: '20b2aa', location: location() }; },
        "LightSeaGreen",
        peg$literalExpectation("LightSeaGreen", false),
        "lightskyblue",
        peg$literalExpectation("lightskyblue", false),
        function() { return { term: 'color', value: '87cefaff', value6: '87cefa', location: location() }; },
        "LightSkyBlue",
        peg$literalExpectation("LightSkyBlue", false),
        "lightslategray",
        peg$literalExpectation("lightslategray", false),
        function() { return { term: 'color', value: '778899ff', value6: '778899', location: location() }; },
        "LightSlateGray",
        peg$literalExpectation("LightSlateGray", false),
        "lightslategrey",
        peg$literalExpectation("lightslategrey", false),
        "LightSlateGrey",
        peg$literalExpectation("LightSlateGrey", false),
        "lightsteelblue",
        peg$literalExpectation("lightsteelblue", false),
        function() { return { term: 'color', value: 'b0c4deff', value6: 'b0c4de', location: location() }; },
        "LightSteelBlue",
        peg$literalExpectation("LightSteelBlue", false),
        "lightyellow",
        peg$literalExpectation("lightyellow", false),
        function() { return { term: 'color', value: 'ffffe0ff', value6: 'ffffe0', location: location() }; },
        "LightYellow",
        peg$literalExpectation("LightYellow", false),
        "lime",
        peg$literalExpectation("lime", false),
        function() { return { term: 'color', value: '00ff00ff', value6: '00ff00', location: location() }; },
        "Lime",
        peg$literalExpectation("Lime", false),
        "limegreen",
        peg$literalExpectation("limegreen", false),
        function() { return { term: 'color', value: '32cd32ff', value6: '32cd32', location: location() }; },
        "LimeGreen",
        peg$literalExpectation("LimeGreen", false),
        "linen",
        peg$literalExpectation("linen", false),
        function() { return { term: 'color', value: 'faf0e6ff', value6: 'faf0e6', location: location() }; },
        "Linen",
        peg$literalExpectation("Linen", false),
        "magenta",
        peg$literalExpectation("magenta", false),
        "Magenta",
        peg$literalExpectation("Magenta", false),
        "maroon",
        peg$literalExpectation("maroon", false),
        function() { return { term: 'color', value: '800000ff', value6: '800000', location: location() }; },
        "Maroon",
        peg$literalExpectation("Maroon", false),
        "mediumaquamarine",
        peg$literalExpectation("mediumaquamarine", false),
        function() { return { term: 'color', value: '66cdaaff', value6: '66cdaa', location: location() }; },
        "MediumAquaMarine",
        peg$literalExpectation("MediumAquaMarine", false),
        "mediumblue",
        peg$literalExpectation("mediumblue", false),
        function() { return { term: 'color', value: '0000cdff', value6: '0000cd', location: location() }; },
        "MediumBlue",
        peg$literalExpectation("MediumBlue", false),
        "mediumorchid",
        peg$literalExpectation("mediumorchid", false),
        function() { return { term: 'color', value: 'ba55d3ff', value6: 'ba55d3', location: location() }; },
        "MediumOrchid",
        peg$literalExpectation("MediumOrchid", false),
        "mediumpurple",
        peg$literalExpectation("mediumpurple", false),
        function() { return { term: 'color', value: '9370d8ff', value6: '9370d8', location: location() }; },
        "MediumPurple",
        peg$literalExpectation("MediumPurple", false),
        "mediumseagreen",
        peg$literalExpectation("mediumseagreen", false),
        function() { return { term: 'color', value: '3cb371ff', value6: '3cb371', location: location() }; },
        "MediumSeaGreen",
        peg$literalExpectation("MediumSeaGreen", false),
        "mediumslateblue",
        peg$literalExpectation("mediumslateblue", false),
        function() { return { term: 'color', value: '7b68eeff', value6: '7b68ee', location: location() }; },
        "MediumSlateBlue",
        peg$literalExpectation("MediumSlateBlue", false),
        "mediumspringgreen",
        peg$literalExpectation("mediumspringgreen", false),
        function() { return { term: 'color', value: '00fa9aff', value6: '00fa9a', location: location() }; },
        "MediumSpringGreen",
        peg$literalExpectation("MediumSpringGreen", false),
        "mediumturquoise",
        peg$literalExpectation("mediumturquoise", false),
        function() { return { term: 'color', value: '48d1ccff', value6: '48d1cc', location: location() }; },
        "MediumTurquoise",
        peg$literalExpectation("MediumTurquoise", false),
        "mediumvioletred",
        peg$literalExpectation("mediumvioletred", false),
        function() { return { term: 'color', value: 'c71585ff', value6: 'c71585', location: location() }; },
        "MediumVioletRed",
        peg$literalExpectation("MediumVioletRed", false),
        "midnightblue",
        peg$literalExpectation("midnightblue", false),
        function() { return { term: 'color', value: '191970ff', value6: '191970', location: location() }; },
        "MidnightBlue",
        peg$literalExpectation("MidnightBlue", false),
        "mintcream",
        peg$literalExpectation("mintcream", false),
        function() { return { term: 'color', value: 'f5fffaff', value6: 'f5fffa', location: location() }; },
        "MintCream",
        peg$literalExpectation("MintCream", false),
        "mistyrose",
        peg$literalExpectation("mistyrose", false),
        function() { return { term: 'color', value: 'ffe4e1ff', value6: 'ffe4e1', location: location() }; },
        "MistyRose",
        peg$literalExpectation("MistyRose", false),
        "moccasin",
        peg$literalExpectation("moccasin", false),
        function() { return { term: 'color', value: 'ffe4b5ff', value6: 'ffe4b5', location: location() }; },
        "Moccasin",
        peg$literalExpectation("Moccasin", false),
        "navajowhite",
        peg$literalExpectation("navajowhite", false),
        function() { return { term: 'color', value: 'ffdeadff', value6: 'ffdead', location: location() }; },
        "NavajoWhite",
        peg$literalExpectation("NavajoWhite", false),
        "navy",
        peg$literalExpectation("navy", false),
        function() { return { term: 'color', value: '000080ff', value6: '000080', location: location() }; },
        "Navy",
        peg$literalExpectation("Navy", false),
        "oldlace",
        peg$literalExpectation("oldlace", false),
        function() { return { term: 'color', value: 'fdf5e6ff', value6: 'fdf5e6', location: location() }; },
        "OldLace",
        peg$literalExpectation("OldLace", false),
        "olive",
        peg$literalExpectation("olive", false),
        function() { return { term: 'color', value: '808000ff', value6: '808000', location: location() }; },
        "Olive",
        peg$literalExpectation("Olive", false),
        "olivedrab",
        peg$literalExpectation("olivedrab", false),
        function() { return { term: 'color', value: '6b8e23ff', value6: '6b8e23', location: location() }; },
        "OliveDrab",
        peg$literalExpectation("OliveDrab", false),
        "orange",
        peg$literalExpectation("orange", false),
        function() { return { term: 'color', value: 'ffa500ff', value6: 'ffa500', location: location() }; },
        "Orange",
        peg$literalExpectation("Orange", false),
        "orangered",
        peg$literalExpectation("orangered", false),
        function() { return { term: 'color', value: 'ff4500ff', value6: 'ff4500', location: location() }; },
        "OrangeRed",
        peg$literalExpectation("OrangeRed", false),
        "orchid",
        peg$literalExpectation("orchid", false),
        function() { return { term: 'color', value: 'da70d6ff', value6: 'da70d6', location: location() }; },
        "Orchid",
        peg$literalExpectation("Orchid", false),
        "palegoldenrod",
        peg$literalExpectation("palegoldenrod", false),
        function() { return { term: 'color', value: 'eee8aaff', value6: 'eee8aa', location: location() }; },
        "PaleGoldenRod",
        peg$literalExpectation("PaleGoldenRod", false),
        "palegreen",
        peg$literalExpectation("palegreen", false),
        function() { return { term: 'color', value: '98fb98ff', value6: '98fb98', location: location() }; },
        "PaleGreen",
        peg$literalExpectation("PaleGreen", false),
        "paleturquoise",
        peg$literalExpectation("paleturquoise", false),
        function() { return { term: 'color', value: 'afeeeeff', value6: 'afeeee', location: location() }; },
        "PaleTurquoise",
        peg$literalExpectation("PaleTurquoise", false),
        "palevioletred",
        peg$literalExpectation("palevioletred", false),
        function() { return { term: 'color', value: 'd87093ff', value6: 'd87093', location: location() }; },
        "PaleVioletRed",
        peg$literalExpectation("PaleVioletRed", false),
        "papayawhip",
        peg$literalExpectation("papayawhip", false),
        function() { return { term: 'color', value: 'ffefd5ff', value6: 'ffefd5', location: location() }; },
        "PapayaWhip",
        peg$literalExpectation("PapayaWhip", false),
        "peachpuff",
        peg$literalExpectation("peachpuff", false),
        function() { return { term: 'color', value: 'ffdab9ff', value6: 'ffdab9', location: location() }; },
        "PeachPuff",
        peg$literalExpectation("PeachPuff", false),
        "peru",
        peg$literalExpectation("peru", false),
        function() { return { term: 'color', value: 'cd853fff', value6: 'cd853f', location: location() }; },
        "Peru",
        peg$literalExpectation("Peru", false),
        "pink",
        peg$literalExpectation("pink", false),
        function() { return { term: 'color', value: 'ffc0cbff', value6: 'ffc0cb', location: location() }; },
        "Pink",
        peg$literalExpectation("Pink", false),
        "plum",
        peg$literalExpectation("plum", false),
        function() { return { term: 'color', value: 'dda0ddff', value6: 'dda0dd', location: location() }; },
        "Plum",
        peg$literalExpectation("Plum", false),
        "powderblue",
        peg$literalExpectation("powderblue", false),
        function() { return { term: 'color', value: 'b0e0e6ff', value6: 'b0e0e6', location: location() }; },
        "PowderBlue",
        peg$literalExpectation("PowderBlue", false),
        "purple",
        peg$literalExpectation("purple", false),
        function() { return { term: 'color', value: '800080ff', value6: '800080', location: location() }; },
        "Purple",
        peg$literalExpectation("Purple", false),
        "red",
        peg$literalExpectation("red", false),
        function() { return { term: 'color', value: 'ff0000ff', value6: 'ff0000', location: location() }; },
        "Red",
        peg$literalExpectation("Red", false),
        "rosybrown",
        peg$literalExpectation("rosybrown", false),
        function() { return { term: 'color', value: 'bc8f8fff', value6: 'bc8f8f', location: location() }; },
        "RosyBrown",
        peg$literalExpectation("RosyBrown", false),
        "royalblue",
        peg$literalExpectation("royalblue", false),
        function() { return { term: 'color', value: '4169e1ff', value6: '4169e1', location: location() }; },
        "RoyalBlue",
        peg$literalExpectation("RoyalBlue", false),
        "saddlebrown",
        peg$literalExpectation("saddlebrown", false),
        function() { return { term: 'color', value: '8b4513ff', value6: '8b4513', location: location() }; },
        "SaddleBrown",
        peg$literalExpectation("SaddleBrown", false),
        "salmon",
        peg$literalExpectation("salmon", false),
        function() { return { term: 'color', value: 'fa8072ff', value6: 'fa8072', location: location() }; },
        "Salmon",
        peg$literalExpectation("Salmon", false),
        "sandybrown",
        peg$literalExpectation("sandybrown", false),
        function() { return { term: 'color', value: 'f4a460ff', value6: 'f4a460', location: location() }; },
        "SandyBrown",
        peg$literalExpectation("SandyBrown", false),
        "seagreen",
        peg$literalExpectation("seagreen", false),
        function() { return { term: 'color', value: '2e8b57ff', value6: '2e8b57', location: location() }; },
        "SeaGreen",
        peg$literalExpectation("SeaGreen", false),
        "seashell",
        peg$literalExpectation("seashell", false),
        function() { return { term: 'color', value: 'fff5eeff', value6: 'fff5ee', location: location() }; },
        "SeaShell",
        peg$literalExpectation("SeaShell", false),
        "sienna",
        peg$literalExpectation("sienna", false),
        function() { return { term: 'color', value: 'a0522dff', value6: 'a0522d', location: location() }; },
        "Sienna",
        peg$literalExpectation("Sienna", false),
        "silver",
        peg$literalExpectation("silver", false),
        function() { return { term: 'color', value: 'c0c0c0ff', value6: 'c0c0c0', location: location() }; },
        "Silver",
        peg$literalExpectation("Silver", false),
        "skyblue",
        peg$literalExpectation("skyblue", false),
        function() { return { term: 'color', value: '87ceebff', value6: '87ceeb', location: location() }; },
        "SkyBlue",
        peg$literalExpectation("SkyBlue", false),
        "slateblue",
        peg$literalExpectation("slateblue", false),
        function() { return { term: 'color', value: '6a5acdff', value6: '6a5acd', location: location() }; },
        "SlateBlue",
        peg$literalExpectation("SlateBlue", false),
        "slategray",
        peg$literalExpectation("slategray", false),
        function() { return { term: 'color', value: '708090ff', value6: '708090', location: location() }; },
        "SlateGray",
        peg$literalExpectation("SlateGray", false),
        "slategrey",
        peg$literalExpectation("slategrey", false),
        "SlateGrey",
        peg$literalExpectation("SlateGrey", false),
        "snow",
        peg$literalExpectation("snow", false),
        function() { return { term: 'color', value: 'fffafaff', value6: 'fffafa', location: location() }; },
        "Snow",
        peg$literalExpectation("Snow", false),
        "springgreen",
        peg$literalExpectation("springgreen", false),
        function() { return { term: 'color', value: '00ff7fff', value6: '00ff7f', location: location() }; },
        "SpringGreen",
        peg$literalExpectation("SpringGreen", false),
        "steelblue",
        peg$literalExpectation("steelblue", false),
        function() { return { term: 'color', value: '4682b4ff', value6: '4682b4', location: location() }; },
        "SteelBlue",
        peg$literalExpectation("SteelBlue", false),
        "tan",
        peg$literalExpectation("tan", false),
        function() { return { term: 'color', value: 'd2b48cff', value6: 'd2b48c', location: location() }; },
        "Tan",
        peg$literalExpectation("Tan", false),
        "teal",
        peg$literalExpectation("teal", false),
        function() { return { term: 'color', value: '008080ff', value6: '008080', location: location() }; },
        "Teal",
        peg$literalExpectation("Teal", false),
        "thistle",
        peg$literalExpectation("thistle", false),
        function() { return { term: 'color', value: 'd8bfd8ff', value6: 'd8bfd8', location: location() }; },
        "Thistle",
        peg$literalExpectation("Thistle", false),
        "tomato",
        peg$literalExpectation("tomato", false),
        function() { return { term: 'color', value: 'ff6347ff', value6: 'ff6347', location: location() }; },
        "Tomato",
        peg$literalExpectation("Tomato", false),
        "turquoise",
        peg$literalExpectation("turquoise", false),
        function() { return { term: 'color', value: '40e0d0ff', value6: '40e0d0', location: location() }; },
        "Turquoise",
        peg$literalExpectation("Turquoise", false),
        "violet",
        peg$literalExpectation("violet", false),
        function() { return { term: 'color', value: 'ee82eeff', value6: 'ee82ee', location: location() }; },
        "Violet",
        peg$literalExpectation("Violet", false),
        "wheat",
        peg$literalExpectation("wheat", false),
        function() { return { term: 'color', value: 'f5deb3ff', value6: 'f5deb3', location: location() }; },
        "Wheat",
        peg$literalExpectation("Wheat", false),
        "white",
        peg$literalExpectation("white", false),
        function() { return { term: 'color', value: 'ffffffff', value6: 'ffffff', location: location() }; },
        "White",
        peg$literalExpectation("White", false),
        "whitesmoke",
        peg$literalExpectation("whitesmoke", false),
        function() { return { term: 'color', value: 'f5f5f5ff', value6: 'f5f5f5', location: location() }; },
        "WhiteSmoke",
        peg$literalExpectation("WhiteSmoke", false),
        "yellow",
        peg$literalExpectation("yellow", false),
        function() { return { term: 'color', value: 'ffff00ff', value6: 'ffff00', location: location() }; },
        "Yellow",
        peg$literalExpectation("Yellow", false),
        "yellowgreen",
        peg$literalExpectation("yellowgreen", false),
        function() { return { term: 'color', value: '9acd32ff', value6: '9acd32', location: location() }; },
        "YellowGreen",
        peg$literalExpectation("YellowGreen", false),
        "#",
        peg$literalExpectation("#", false),
        function(r, g, b) {
            return {
            	term     : 'color',
            	value    : `${r}${r}${g}${g}${b}${b}ff`,
            	value6   : `${r}${r}${g}${g}${b}${b}`,
            	location : location()
            };
          },
        function(r1, r2, g1, g2, b1, b2) {
            return {
            	term: 'color',
            	value: `${r1}${r2}${g1}${g2}${b1}${b2}ff`,
            	value6: `${r1}${r2}${g1}${g2}${b1}${b2}`,
            	location: location()
            };
          },
        function(r, g, b, a) {
            return {
            	term: 'color',
            	value: `${r}${r}${g}${g}${b}${b}${a}${a}`,
            	value6: `${r}${r}${g}${g}${b}${b}`,
            	location: location()
            };
          },
        function(r1, r2, g1, g2, b1, b2, a1, a2) {
            return {
            	term: 'color',
            	value: `${r1}${r2}${g1}${g2}${b1}${b2}${a1}${a2}`,
            	value6: `${r1}${r2}${g1}${g2}${b1}${b2}`,
            	location: location()
            };
          },
        peg$otherExpectation("color"),
        peg$otherExpectation("arrow"),
        peg$otherExpectation("forward light arrow ->"),
        "->",
        peg$literalExpectation("->", false),
        function() { return { term: "arrow", location: location(), value: "->" };  },
        "\u2192",
        peg$literalExpectation("\u2192", false),
        peg$otherExpectation("two way light arrow <->"),
        "<->",
        peg$literalExpectation("<->", false),
        function() { return { term: "arrow", location: location(), value: "<->" }; },
        "\u2194",
        peg$literalExpectation("\u2194", false),
        peg$otherExpectation("back light arrow <-"),
        "<-",
        peg$literalExpectation("<-", false),
        function() { return { term: "arrow", location: location(), value: "<-" };  },
        "\u2190",
        peg$literalExpectation("\u2190", false),
        peg$otherExpectation("forward fat arrow =>"),
        "=>",
        peg$literalExpectation("=>", false),
        function() { return { term: "arrow", location: location(), value: "=>" };  },
        "\u21D2",
        peg$literalExpectation("\u21D2", false),
        peg$otherExpectation("two way fat arrow <=>"),
        "<=>",
        peg$literalExpectation("<=>", false),
        function() { return { term: "arrow", location: location(), value: "<=>" }; },
        "\u21D4",
        peg$literalExpectation("\u21D4", false),
        peg$otherExpectation("back fat arrow <="),
        function() { return { term: "arrow", location: location(), value: "<=" };  },
        "\u21D0",
        peg$literalExpectation("\u21D0", false),
        peg$otherExpectation("forward tilde arrow ~>"),
        "~>",
        peg$literalExpectation("~>", false),
        function() { return { term: "arrow", location: location(), value: "~>" };  },
        "\u219B",
        peg$literalExpectation("\u219B", false),
        peg$otherExpectation("two way tilde arrow <~>"),
        "<~>",
        peg$literalExpectation("<~>", false),
        function() { return { term: "arrow", location: location(), value: "<~>" }; },
        "\u21AE",
        peg$literalExpectation("\u21AE", false),
        peg$otherExpectation("back tilde arrow <~"),
        "<~",
        peg$literalExpectation("<~", false),
        function() { return { term: "arrow", location: location(), value: "<~" };  },
        "\u219A",
        peg$literalExpectation("\u219A", false),
        peg$otherExpectation("light fat arrow <-=>"),
        "<-=>",
        peg$literalExpectation("<-=>", false),
        function() { return { term: "arrow", location: location(), value: "<-=>" }; },
        "<-\u21D2",
        peg$literalExpectation("<-\u21D2", false),
        "\u2190=>",
        peg$literalExpectation("\u2190=>", false),
        "\u2190\u21D2",
        peg$literalExpectation("\u2190\u21D2", false),
        peg$otherExpectation("light tilde arrow <-~>"),
        "<-~>",
        peg$literalExpectation("<-~>", false),
        function() { return { term: "arrow", location: location(), value: "<-~>" }; },
        "\u2190~>",
        peg$literalExpectation("\u2190~>", false),
        "<-\u219B",
        peg$literalExpectation("<-\u219B", false),
        "\u2190\u219B",
        peg$literalExpectation("\u2190\u219B", false),
        peg$otherExpectation("fat light arrow <=->"),
        "<=->",
        peg$literalExpectation("<=->", false),
        function() { return { term: "arrow", location: location(), value: "<=->" }; },
        "\u21D0->",
        peg$literalExpectation("\u21D0->", false),
        "<=\u2192",
        peg$literalExpectation("<=\u2192", false),
        "\u21D0\u2192",
        peg$literalExpectation("\u21D0\u2192", false),
        peg$otherExpectation("fat tilde arrow <=~>"),
        "<=~>",
        peg$literalExpectation("<=~>", false),
        function() { return { term: "arrow", location: location(), value: "<=~>" }; },
        "\u21D0~>",
        peg$literalExpectation("\u21D0~>", false),
        "<=\u219B",
        peg$literalExpectation("<=\u219B", false),
        "\u21D0\u219B",
        peg$literalExpectation("\u21D0\u219B", false),
        peg$otherExpectation("tilde light arrow <~->"),
        "<~->",
        peg$literalExpectation("<~->", false),
        function() { return { term: "arrow", location: location(), value: "<~->" }; },
        "\u219A->",
        peg$literalExpectation("\u219A->", false),
        "<~\u2192",
        peg$literalExpectation("<~\u2192", false),
        "\u219A\u2192",
        peg$literalExpectation("\u219A\u2192", false),
        peg$otherExpectation("tilde fat arrow <~=>"),
        "<~=>",
        peg$literalExpectation("<~=>", false),
        function() { return { term: "arrow", location: location(), value: "<~=>" }; },
        "\u219A=>",
        peg$literalExpectation("\u219A=>", false),
        "<~\u21D2",
        peg$literalExpectation("<~\u21D2", false),
        "\u219A\u21D2",
        peg$literalExpectation("\u219A\u21D2", false),
        peg$otherExpectation("light arrow"),
        peg$otherExpectation("fat arrow"),
        peg$otherExpectation("tilde arrow"),
        peg$otherExpectation("mixed arrow"),
        "arc_label",
        peg$literalExpectation("arc_label", false),
        "head_label",
        peg$literalExpectation("head_label", false),
        "tail_label",
        peg$literalExpectation("tail_label", false),
        peg$otherExpectation("single edge color"),
        "edge_color",
        peg$literalExpectation("edge_color", false),
        function(value) {
            return { term: 'single_edge_color', value, location: location() };
          },
        "{",
        peg$literalExpectation("{", false),
        "}",
        peg$literalExpectation("}", false),
        function(items) { return items; },
        "%",
        peg$literalExpectation("%", false),
        function(value) {
            return { term: 'arrow_probability', value, location: location() };
          },
        "box",
        peg$literalExpectation("box", false),
        "polygon",
        peg$literalExpectation("polygon", false),
        "ellipse",
        peg$literalExpectation("ellipse", false),
        "oval",
        peg$literalExpectation("oval", false),
        "circle",
        peg$literalExpectation("circle", false),
        "point",
        peg$literalExpectation("point", false),
        "egg",
        peg$literalExpectation("egg", false),
        "triangle",
        peg$literalExpectation("triangle", false),
        "plaintext",
        peg$literalExpectation("plaintext", false),
        "plain",
        peg$literalExpectation("plain", false),
        "diamond",
        peg$literalExpectation("diamond", false),
        "trapezium",
        peg$literalExpectation("trapezium", false),
        "parallelogram",
        peg$literalExpectation("parallelogram", false),
        "house",
        peg$literalExpectation("house", false),
        "pentagon",
        peg$literalExpectation("pentagon", false),
        "hexagon",
        peg$literalExpectation("hexagon", false),
        "septagon",
        peg$literalExpectation("septagon", false),
        "octagon",
        peg$literalExpectation("octagon", false),
        "doublecircle",
        peg$literalExpectation("doublecircle", false),
        "doubleoctagon",
        peg$literalExpectation("doubleoctagon", false),
        "tripleoctagon",
        peg$literalExpectation("tripleoctagon", false),
        "invtriangle",
        peg$literalExpectation("invtriangle", false),
        "invtrapezium",
        peg$literalExpectation("invtrapezium", false),
        "invhouse",
        peg$literalExpectation("invhouse", false),
        "Mdiamond",
        peg$literalExpectation("Mdiamond", false),
        "Msquare",
        peg$literalExpectation("Msquare", false),
        "Mcircle",
        peg$literalExpectation("Mcircle", false),
        "rect",
        peg$literalExpectation("rect", false),
        "rectangle",
        peg$literalExpectation("rectangle", false),
        "square",
        peg$literalExpectation("square", false),
        "star",
        peg$literalExpectation("star", false),
        "none",
        peg$literalExpectation("none", false),
        "underline",
        peg$literalExpectation("underline", false),
        "cylinder",
        peg$literalExpectation("cylinder", false),
        "note",
        peg$literalExpectation("note", false),
        "tab",
        peg$literalExpectation("tab", false),
        "folder",
        peg$literalExpectation("folder", false),
        "box3d",
        peg$literalExpectation("box3d", false),
        "component",
        peg$literalExpectation("component", false),
        "promoter",
        peg$literalExpectation("promoter", false),
        "cds",
        peg$literalExpectation("cds", false),
        "terminator",
        peg$literalExpectation("terminator", false),
        "utr",
        peg$literalExpectation("utr", false),
        "primersite",
        peg$literalExpectation("primersite", false),
        "restrictionsite",
        peg$literalExpectation("restrictionsite", false),
        "fivepoverhang",
        peg$literalExpectation("fivepoverhang", false),
        "threepoverhang",
        peg$literalExpectation("threepoverhang", false),
        "noverhang",
        peg$literalExpectation("noverhang", false),
        "assembly",
        peg$literalExpectation("assembly", false),
        "signature",
        peg$literalExpectation("signature", false),
        "insulator",
        peg$literalExpectation("insulator", false),
        "ribosite",
        peg$literalExpectation("ribosite", false),
        "rnastab",
        peg$literalExpectation("rnastab", false),
        "proteasesite",
        peg$literalExpectation("proteasesite", false),
        "proteinstab",
        peg$literalExpectation("proteinstab", false),
        "rpromoter",
        peg$literalExpectation("rpromoter", false),
        "rarrow",
        peg$literalExpectation("rarrow", false),
        "larrow",
        peg$literalExpectation("larrow", false),
        "lpromoter",
        peg$literalExpectation("lpromoter", false),
        "record",
        peg$literalExpectation("record", false),
        peg$otherExpectation("shape"),
        function(value) { return { term: 'shape', value, location: location() }; },
        peg$otherExpectation("stripe"),
        "+|",
        peg$literalExpectation("+|", false),
        function(value) { return { key: 'stripe', value,                  location: location() }; },
        "-|",
        peg$literalExpectation("-|", false),
        function(value) { return { key: 'stripe', value: signflip(value), location: location() }; },
        peg$otherExpectation("cycle"),
        "+",
        peg$literalExpectation("+", false),
        function(value) { return { key: 'cycle',  value,                  location: location() }; },
        "-",
        peg$literalExpectation("-", false),
        function(value) { return { key: 'cycle',  value: signflip(value), location: location() }; },
        peg$otherExpectation("machine config for transitions"),
        "transition",
        peg$literalExpectation("transition", false),
        "};",
        peg$literalExpectation("};", false),
        function(value) {
            return { term: "machine_config_transition", value, location: location() };
          },
        peg$otherExpectation("machine config for start states"),
        "start_state",
        peg$literalExpectation("start_state", false),
        peg$otherExpectation("machine config for end states"),
        "end_state",
        peg$literalExpectation("end_state", false),
        peg$otherExpectation("machine config for states"),
        "state",
        peg$literalExpectation("state", false),
        peg$otherExpectation("machine config"),
        "arrow_head",
        peg$literalExpectation("arrow_head", false),
        "reverse_arrow_head",
        peg$literalExpectation("reverse_arrow_head", false),
        "reverse_edge_color",
        peg$literalExpectation("reverse_edge_color", false),
        "node_shape",
        peg$literalExpectation("node_shape", false),
        function(term) {
          	return { term, value, location: location() };
          },
        "node_color",
        peg$literalExpectation("node_color", false),
        "node_border_color",
        peg$literalExpectation("node_border_color", false),
        function(value) {
            return { term: "config_state_item_list", value, location: location() };
          },
        "lbox",
        peg$literalExpectation("lbox", false),
        "rbox",
        peg$literalExpectation("rbox", false),
        "obox",
        peg$literalExpectation("obox", false),
        "olbox",
        peg$literalExpectation("olbox", false),
        "orbox",
        peg$literalExpectation("orbox", false),
        "crow",
        peg$literalExpectation("crow", false),
        "lcrow",
        peg$literalExpectation("lcrow", false),
        "rcrow",
        peg$literalExpectation("rcrow", false),
        "ldiamond",
        peg$literalExpectation("ldiamond", false),
        "rdiamond",
        peg$literalExpectation("rdiamond", false),
        "odiamond",
        peg$literalExpectation("odiamond", false),
        "oldiamond",
        peg$literalExpectation("oldiamond", false),
        "ordiamond",
        peg$literalExpectation("ordiamond", false),
        "odot",
        peg$literalExpectation("odot", false),
        "inv",
        peg$literalExpectation("inv", false),
        "linv",
        peg$literalExpectation("linv", false),
        "rinv",
        peg$literalExpectation("rinv", false),
        "oinv",
        peg$literalExpectation("oinv", false),
        "olinv",
        peg$literalExpectation("olinv", false),
        "orinv",
        peg$literalExpectation("orinv", false),
        "normal",
        peg$literalExpectation("normal", false),
        "lnormal",
        peg$literalExpectation("lnormal", false),
        "rnormal",
        peg$literalExpectation("rnormal", false),
        "onormal",
        peg$literalExpectation("onormal", false),
        "olnormal",
        peg$literalExpectation("olnormal", false),
        "ornormal",
        peg$literalExpectation("ornormal", false),
        "tee",
        peg$literalExpectation("tee", false),
        "ltee",
        peg$literalExpectation("ltee", false),
        "rtee",
        peg$literalExpectation("rtee", false),
        "vee",
        peg$literalExpectation("vee", false),
        "lvee",
        peg$literalExpectation("lvee", false),
        "rvee",
        peg$literalExpectation("rvee", false),
        "curve",
        peg$literalExpectation("curve", false),
        "lcurve",
        peg$literalExpectation("lcurve", false),
        "rcurve",
        peg$literalExpectation("rcurve", false),
        "icurve",
        peg$literalExpectation("icurve", false),
        "licurve",
        peg$literalExpectation("licurve", false),
        "ricurve",
        peg$literalExpectation("ricurve", false),
        function(value) { return { term: 'arrow_head', value, location: location() }; },
        function(value) { return { term: 'arrow_tail', value, location: location() }; },
        peg$otherExpectation("state declaration"),
        function(name, value) {
          	return {
          		term     : 'state_declaration',
          		name,
          		value,
          		location : location()
            };
          },
        "&",
        peg$literalExpectation("&", false),
        function(name, value) {
            return {
            	term: 'named_list',
            	name,
            	value,
            	location: location()
            };
          }
      ],

      peg$bytecode = [
        peg$decode("%;3.\" &\"/8#$;!0#*;!&/($8\": \"! )(\"'#&'#"),
        peg$decode(";,.5 &;\x89./ &;\x8A.) &;*.# &;z"),
        peg$decode("2!\"\"6!7\".A &2#\"\"6#7$.5 &2%\"\"6%7&.) &2'\"\"6'7("),
        peg$decode("%;\"/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;F/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:-(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2.\"\"6.7/.) &20\"\"6071"),
        peg$decode("%;$/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;D/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:-(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("22\"\"6273.) &24\"\"6475"),
        peg$decode("%;&/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;M/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:-(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%26\"\"6677/\x87#;3.\" &\"/y$2)\"\"6)7*/j$;3.\" &\"/\\$;5/S$;3.\" &\"/E$2+\"\"6+7,/6$;3.\" &\"/($8(:8(!#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%29\"\"697:/\x87#;3.\" &\"/y$2)\"\"6)7*/j$;3.\" &\"/\\$;G/S$;3.\" &\"/E$2+\"\"6+7,/6$;3.\" &\"/($8(:;(!#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("<;(.5 &;)./ &;#.) &;%.# &;'=.\" 7<"),
        peg$decode("%;3.\" &\"/\u0114#;?.\" &\"/\u0106$;3.\" &\"/\xF8$;p.\" &\"/\xEA$;3.\" &\"/\xDC$;o.\" &\"/\xCE$;3.\" &\"/\xC0$;W/\xB7$;3.\" &\"/\xA9$;o.\" &\"/\x9B$;3.\" &\"/\x8D$;p.\" &\"/\x7F$;3.\" &\"/q$;?.\" &\"/c$;3.\" &\"/U$;q/L$;3.\" &\"/>$;+.\" &\"/0$82:=2)0.,*(&$\" )(2'#(1'#(0'#(/'#(.'#(-'#(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;q/]#;+/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8%:>%\"$#)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("4?\"\"5!7@"),
        peg$decode("2A\"\"6A7B.; &%1\"\"5!7C/,#;./#$+\")(\"'#&'#"),
        peg$decode("<%2E\"\"6E7F/,#;./#$+\")(\"'#&'#=.\" 7D"),
        peg$decode("%<1\"\"5!7C=.##&&!&'#"),
        peg$decode(";-.A &;0.; &%1\"\"5!7C/,#;1/#$+\")(\"'#&'#"),
        peg$decode("<%2H\"\"6H7I/,#;1/#$+\")(\"'#&'#=.\" 7G"),
        peg$decode("<%;//6#;3.\" &\"/($8\":K\"! )(\"'#&'#.| &%;2/6#;3.\" &\"/($8\":K\"! )(\"'#&'#.Y &%$4L\"\"5!7M/,#0)*4L\"\"5!7M&&&#/6#;3.\" &\"/($8\":K\"! )(\"'#&'#=.\" 7J"),
        peg$decode("2N\"\"6N7O.\u0101 &2P\"\"6P7Q.\xF5 &2R\"\"6R7S.\xE9 &2T\"\"6T7U.\xDD &2V\"\"6V7W.\xD1 &2X\"\"6X7Y.\xC5 &2Z\"\"6Z7[.\xB9 &2\\\"\"6\\7].\xAD &2^\"\"6^7_.\xA1 &2`\"\"6`7a.\x95 &2b\"\"6b7c.\x89 &2d\"\"6d7e.} &2f\"\"6f7g.q &2h\"\"6h7i.e &2j\"\"6j7k.Y &2l\"\"6l7m.M &2n\"\"6n7o.A &2p\"\"6p7q.5 &2r\"\"6r7s.) &2t\"\"6t7u"),
        peg$decode("<%;4/Y#2)\"\"6)7*/J$$4w\"\"5!7x/,#0)*4w\"\"5!7x&&&#/($8#:y#!\")(#'#(\"'#&'#=.\" 7v"),
        peg$decode("<%2{\"\"6{7|/& 8!:}! ).b &%2~\"\"6~7\x7F/& 8!:\x80! ).K &%2\x81\"\"6\x817\x82/& 8!:\x83! ).4 &%2\x84\"\"6\x847\x85/& 8!:\x86! )=.\" 7z"),
        peg$decode("<%2\x88\"\"6\x887\x89/\x87#;3.\" &\"/y$2)\"\"6)7*/j$;3.\" &\"/\\$;6/S$;3.\" &\"/E$2+\"\"6+7,/6$;3.\" &\"/($8(:\x8A(!#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x87"),
        peg$decode(";;.\u0133 &%;9/\u0129#2\x8B\"\"6\x8B7\x8C.\u010F &2\x8D\"\"6\x8D7\x8E.\u0103 &2\x8F\"\"6\x8F7\x90.\xF7 &%2\x91\"\"6\x917\x92/& 8!:\x93! ).\xE0 &%2\x94\"\"6\x947\x95/& 8!:\x96! ).\xC9 &%2\x97\"\"6\x977\x98/& 8!:\x99! ).\xB2 &%2\x9A\"\"6\x9A7\x9B/& 8!:\x9C! ).\x9B &%2\x9D\"\"6\x9D7\x9E/& 8!:\x9F! ).\x84 &%2\xA0\"\"6\xA07\xA1/& 8!:\xA2! ).m &%2\xA3\"\"6\xA37\xA4/]#%%;H/>#;H/5$;H/,$;H/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":\xA5\"! )(\"'#&'#/($8\":\xA6\"! )(\"'#&'#"),
        peg$decode("2\x8D\"\"6\x8D7\x8E"),
        peg$decode("2\x8B\"\"6\x8B7\x8C"),
        peg$decode("4\xA7\"\"5!7\xA8"),
        peg$decode(";>.\u0133 &%;9/\u0129#2\xA9\"\"6\xA97\xAA.\u010F &2\x8D\"\"6\x8D7\x8E.\u0103 &2\x8F\"\"6\x8F7\x90.\xF7 &%2\x91\"\"6\x917\x92/& 8!:\x93! ).\xE0 &%2\x94\"\"6\x947\x95/& 8!:\x96! ).\xC9 &%2\x97\"\"6\x977\x98/& 8!:\x99! ).\xB2 &%2\x9A\"\"6\x9A7\x9B/& 8!:\x9C! ).\x9B &%2\x9D\"\"6\x9D7\x9E/& 8!:\x9F! ).\x84 &%2\xA0\"\"6\xA07\xA1/& 8!:\xA2! ).m &%2\xA3\"\"6\xA37\xA4/]#%%;H/>#;H/5$;H/,$;H/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":\xA5\"! )(\"'#&'#/($8\":\xA6\"! )(\"'#&'#"),
        peg$decode("2\xA9\"\"6\xA97\xAA"),
        peg$decode("4\xAB\"\"5!7\xAC"),
        peg$decode("<%;=/A#$;<0#*;<&/1$;=/($8#:\xAE#!!)(#'#(\"'#&'#=.\" 7\xAD"),
        peg$decode("<%;:/A#$;80#*;8&/1$;:/($8#:\xB0#!!)(#'#(\"'#&'#=.\" 7\xAF"),
        peg$decode("4\xB1\"\"5!7\xB2"),
        peg$decode("4\xB3\"\"5!7\xB4"),
        peg$decode("<%;A/9#$;B0#*;B&/)$8\":\xB6\"\"! )(\"'#&'#=.\" 7\xB5"),
        peg$decode("<;C.# &;@=.\" 7\xB7"),
        peg$decode("<%2\xB9\"\"6\xB97\xBA/\x85#;3.\" &\"/w$$%;D/1#;3.\" &\"/#$+\")(\"'#&'#0;*%;D/1#;3.\" &\"/#$+\")(\"'#&'#&/7$2\xBB\"\"6\xBB7\xBC/($8$:\xBD$!!)($'#(#'#(\"'#&'#=.\" 7\xB8"),
        peg$decode("<;E.# &;D=.\" 7\xBE"),
        peg$decode("<%2\xC0\"\"6\xC07\xC1/& 8!:\xC2! ).\u0127 &%2\xC3\"\"6\xC37\xC4/& 8!:\xC5! ).\u0110 &%2\xC6\"\"6\xC67\xC7/& 8!:\xC8! ).\xF9 &%2\xC9\"\"6\xC97\xCA/& 8!:\xCB! ).\xE2 &%2\xCC\"\"6\xCC7\xCD/& 8!:\xCE! ).\xCB &%2\xCF\"\"6\xCF7\xD0/& 8!:\xD1! ).\xB4 &%2\xD2\"\"6\xD27\xD3/& 8!:\xD4! ).\x9D &%2\xD5\"\"6\xD57\xD6/& 8!:\xD7! ).\x86 &%2\xD8\"\"6\xD87\xD9/& 8!:\xDA! ).o &%2\xDB\"\"6\xDB7\xDC/& 8!:\xDD! ).X &%2\xDE\"\"6\xDE7\xDF/& 8!:\xE0! ).A &%2\xE1\"\"6\xE17\xE2/1#;D/($8\":\xE3\"! )(\"'#&'#=.\" 7\xBF"),
        peg$decode("4\xE4\"\"5!7\xE5"),
        peg$decode("4\xE6\"\"5!7\xE7"),
        peg$decode("4\xE8\"\"5!7\xE9"),
        peg$decode("<%2\xEB\"\"6\xEB7\xEC/& 8!:\xED! ).A &%;J/7#$;I0#*;I&/'$8\":\xEE\" )(\"'#&'#=.\" 7\xEA"),
        peg$decode("<%;K/T#2\xF0\"\"6\xF07\xF1/E$$;I0#*;I&/5$;3.\" &\"/'$8$:\xEE$ )($'#(#'#(\"'#&'#.? &%;K/5#;3.\" &\"/'$8\":\xEE\" )(\"'#&'#=.\" 7\xEF"),
        peg$decode("%;K/Z#2\xF0\"\"6\xF07\xF1/K$;K/B$2\xF0\"\"6\xF07\xF1/3$;K/*$8%:\xF2%#$\" )(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\xF3\"\"6\xF37\xF4.Y &2\xF5\"\"6\xF57\xF6.M &2\xF7\"\"6\xF77\xF8.A &2\xF9\"\"6\xF97\xFA.5 &2\xFB\"\"6\xFB7\xFC.) &2\xFD\"\"6\xFD7\xFE"),
        peg$decode("%;N.\" &\"/,#;M/#$+\")(\"'#&'#"),
        peg$decode("%;O/1#;O.\" &\"/#$+\")(\"'#&'#"),
        peg$decode("<%2\u0100\"\"6\u01007\u0101/& 8!:\u0102! ).\u1A70 &%2\u0103\"\"6\u01037\u0104/& 8!:\u0102! ).\u1A59 &%2\u0105\"\"6\u01057\u0106/& 8!:\u0107! ).\u1A42 &%2\u0108\"\"6\u01087\u0109/& 8!:\u0107! ).\u1A2B &%2\u010A\"\"6\u010A7\u010B/& 8!:\u010C! ).\u1A14 &%2\u010D\"\"6\u010D7\u010E/& 8!:\u010C! ).\u19FD &%2\u010F\"\"6\u010F7\u0110/& 8!:\u0111! ).\u19E6 &%2\u0112\"\"6\u01127\u0113/& 8!:\u0111! ).\u19CF &%2\u0114\"\"6\u01147\u0115/& 8!:\u0116! ).\u19B8 &%2\u0117\"\"6\u01177\u0118/& 8!:\u0116! ).\u19A1 &%2\u0119\"\"6\u01197\u011A/& 8!:\u011B! ).\u198A &%2\u011C\"\"6\u011C7\u011D/& 8!:\u011B! ).\u1973 &%2\u011E\"\"6\u011E7\u011F/& 8!:\u0120! ).\u195C &%2\u0121\"\"6\u01217\u0122/& 8!:\u0120! ).\u1945 &%2\u0123\"\"6\u01237\u0124/& 8!:\u0125! ).\u192E &%2\u0126\"\"6\u01267\u0127/& 8!:\u0125! ).\u1917 &%2\u0128\"\"6\u01287\u0129/& 8!:\u012A! ).\u1900 &%2\u012B\"\"6\u012B7\u012C/& 8!:\u012A! ).\u18E9 &%2\u012D\"\"6\u012D7\u012E/& 8!:\u012F! ).\u18D2 &%2\u0130\"\"6\u01307\u0131/& 8!:\u012F! ).\u18BB &%2\u0132\"\"6\u01327\u0133/& 8!:\u0134! ).\u18A4 &%2\u0135\"\"6\u01357\u0136/& 8!:\u0134! ).\u188D &%2\u0137\"\"6\u01377\u0138/& 8!:\u0139! ).\u1876 &%2\u013A\"\"6\u013A7\u013B/& 8!:\u0139! ).\u185F &%2\u013C\"\"6\u013C7\u013D/& 8!:\u013E! ).\u1848 &%2\u013F\"\"6\u013F7\u0140/& 8!:\u013E! ).\u1831 &%2\u0141\"\"6\u01417\u0142/& 8!:\u0143! ).\u181A &%2\u0144\"\"6\u01447\u0145/& 8!:\u0143! ).\u1803 &%2\u0146\"\"6\u01467\u0147/& 8!:\u0148! ).\u17EC &%2\u0149\"\"6\u01497\u014A/& 8!:\u0148! ).\u17D5 &%2\u014B\"\"6\u014B7\u014C/& 8!:\u014D! ).\u17BE &%2\u014E\"\"6\u014E7\u014F/& 8!:\u014D! ).\u17A7 &%2\u0150\"\"6\u01507\u0151/& 8!:\u0152! ).\u1790 &%2\u0153\"\"6\u01537\u0154/& 8!:\u0152! ).\u1779 &%2\u0155\"\"6\u01557\u0156/& 8!:\u0157! ).\u1762 &%2\u0158\"\"6\u01587\u0159/& 8!:\u0157! ).\u174B &%2\u015A\"\"6\u015A7\u015B/& 8!:\u015C! ).\u1734 &%2\u015D\"\"6\u015D7\u015E/& 8!:\u015C! ).\u171D &%2\u015F\"\"6\u015F7\u0160/& 8!:\u0161! ).\u1706 &%2\u0162\"\"6\u01627\u0163/& 8!:\u0161! ).\u16EF &%2\u0164\"\"6\u01647\u0165/& 8!:\u010C! ).\u16D8 &%2\u0166\"\"6\u01667\u0167/& 8!:\u010C! ).\u16C1 &%2\u0168\"\"6\u01687\u0169/& 8!:\u016A! ).\u16AA &%2\u016B\"\"6\u016B7\u016C/& 8!:\u016A! ).\u1693 &%2\u016D\"\"6\u016D7\u016E/& 8!:\u016F! ).\u167C &%2\u0170\"\"6\u01707\u0171/& 8!:\u016F! ).\u1665 &%2\u0172\"\"6\u01727\u0173/& 8!:\u0174! ).\u164E &%2\u0175\"\"6\u01757\u0176/& 8!:\u0174! ).\u1637 &%2\u0177\"\"6\u01777\u0178/& 8!:\u0179! ).\u1620 &%2\u017A\"\"6\u017A7\u017B/& 8!:\u0179! ).\u1609 &%2\u017C\"\"6\u017C7\u017D/& 8!:\u0179! ).\u15F2 &%2\u017E\"\"6\u017E7\u017F/& 8!:\u0179! ).\u15DB &%2\u0180\"\"6\u01807\u0181/& 8!:\u0182! ).\u15C4 &%2\u0183\"\"6\u01837\u0184/& 8!:\u0182! ).\u15AD &%2\u0185\"\"6\u01857\u0186/& 8!:\u0187! ).\u1596 &%2\u0188\"\"6\u01887\u0189/& 8!:\u0187! ).\u157F &%2\u018A\"\"6\u018A7\u018B/& 8!:\u018C! ).\u1568 &%2\u018D\"\"6\u018D7\u018E/& 8!:\u018C! ).\u1551 &%2\u018F\"\"6\u018F7\u0190/& 8!:\u0191! ).\u153A &%2\u0192\"\"6\u01927\u0193/& 8!:\u0191! ).\u1523 &%2\u0194\"\"6\u01947\u0195/& 8!:\u0196! ).\u150C &%2\u0197\"\"6\u01977\u0198/& 8!:\u0196! ).\u14F5 &%2\u0199\"\"6\u01997\u019A/& 8!:\u019B! ).\u14DE &%2\u019C\"\"6\u019C7\u019D/& 8!:\u019B! ).\u14C7 &%2\u019E\"\"6\u019E7\u019F/& 8!:\u01A0! ).\u14B0 &%2\u01A1\"\"6\u01A17\u01A2/& 8!:\u01A0! ).\u1499 &%2\u01A3\"\"6\u01A37\u01A4/& 8!:\u01A5! ).\u1482 &%2\u01A6\"\"6\u01A67\u01A7/& 8!:\u01A5! ).\u146B &%2\u01A8\"\"6\u01A87\u01A9/& 8!:\u01AA! ).\u1454 &%2\u01AB\"\"6\u01AB7\u01AC/& 8!:\u01AA! ).\u143D &%2\u01AD\"\"6\u01AD7\u01AE/& 8!:\u01AF! ).\u1426 &%2\u01B0\"\"6\u01B07\u01B1/& 8!:\u01AF! ).\u140F &%2\u01B2\"\"6\u01B27\u01B3/& 8!:\u01B4! ).\u13F8 &%2\u01B5\"\"6\u01B57\u01B6/& 8!:\u01B4! ).\u13E1 &%2\u01B7\"\"6\u01B77\u01B8/& 8!:\u01B4! ).\u13CA &%2\u01B9\"\"6\u01B97\u01BA/& 8!:\u01B4! ).\u13B3 &%2\u01BB\"\"6\u01BB7\u01BC/& 8!:\u01BD! ).\u139C &%2\u01BE\"\"6\u01BE7\u01BF/& 8!:\u01BD! ).\u1385 &%2\u01C0\"\"6\u01C07\u01C1/& 8!:\u01C2! ).\u136E &%2\u01C3\"\"6\u01C37\u01C4/& 8!:\u01C2! ).\u1357 &%2\u01C5\"\"6\u01C57\u01C6/& 8!:\u01C7! ).\u1340 &%2\u01C8\"\"6\u01C87\u01C9/& 8!:\u01C7! ).\u1329 &%2\u01CA\"\"6\u01CA7\u01CB/& 8!:\u01CC! ).\u1312 &%2\u01CD\"\"6\u01CD7\u01CE/& 8!:\u01CC! ).\u12FB &%2\u01CF\"\"6\u01CF7\u01D0/& 8!:\u01D1! ).\u12E4 &%2\u01D2\"\"6\u01D27\u01D3/& 8!:\u01D1! ).\u12CD &%2\u01D4\"\"6\u01D47\u01D5/& 8!:\u01D1! ).\u12B6 &%2\u01D6\"\"6\u01D67\u01D7/& 8!:\u01D1! ).\u129F &%2\u01D8\"\"6\u01D87\u01D9/& 8!:\u01DA! ).\u1288 &%2\u01DB\"\"6\u01DB7\u01DC/& 8!:\u01DA! ).\u1271 &%2\u01DD\"\"6\u01DD7\u01DE/& 8!:\u01DF! ).\u125A &%2\u01E0\"\"6\u01E07\u01E1/& 8!:\u01DF! ).\u1243 &%2\u01E2\"\"6\u01E27\u01E3/& 8!:\u01E4! ).\u122C &%2\u01E5\"\"6\u01E57\u01E6/& 8!:\u01E4! ).\u1215 &%2\u01E7\"\"6\u01E77\u01E8/& 8!:\u01E9! ).\u11FE &%2\u01EA\"\"6\u01EA7\u01EB/& 8!:\u01E9! ).\u11E7 &%2\u01EC\"\"6\u01EC7\u01ED/& 8!:\u01EE! ).\u11D0 &%2\u01EF\"\"6\u01EF7\u01F0/& 8!:\u01EE! ).\u11B9 &%2\u01F1\"\"6\u01F17\u01F2/& 8!:\u01F3! ).\u11A2 &%2\u01F4\"\"6\u01F47\u01F5/& 8!:\u01F3! ).\u118B &%2\u01F6\"\"6\u01F67\u01F7/& 8!:\u01F8! ).\u1174 &%2\u01F9\"\"6\u01F97\u01FA/& 8!:\u01F8! ).\u115D &%2\u01FB\"\"6\u01FB7\u01FC/& 8!:\u01FD! ).\u1146 &%2\u01FE\"\"6\u01FE7\u01FF/& 8!:\u01FD! ).\u112F &%2\u0200\"\"6\u02007\u0201/& 8!:\u0202! ).\u1118 &%2\u0203\"\"6\u02037\u0204/& 8!:\u0202! ).\u1101 &%2\u0205\"\"6\u02057\u0206/& 8!:\u0207! ).\u10EA &%2\u0208\"\"6\u02087\u0209/& 8!:\u0207! ).\u10D3 &%2\u020A\"\"6\u020A7\u020B/& 8!:\u0207! ).\u10BC &%2\u020C\"\"6\u020C7\u020D/& 8!:\u0207! ).\u10A5 &%2\u020E\"\"6\u020E7\u020F/& 8!:\u0210! ).\u108E &%2\u0211\"\"6\u02117\u0212/& 8!:\u0210! ).\u1077 &%2\u0213\"\"6\u02137\u0214/& 8!:\u0215! ).\u1060 &%2\u0216\"\"6\u02167\u0217/& 8!:\u0215! ).\u1049 &%2\u0218\"\"6\u02187\u0219/& 8!:\u021A! ).\u1032 &%2\u021B\"\"6\u021B7\u021C/& 8!:\u021A! ).\u101B &%2\u021D\"\"6\u021D7\u021E/& 8!:\u021F! ).\u1004 &%2\u0220\"\"6\u02207\u0221/& 8!:\u021F! ).\u0FED &%2\u0222\"\"6\u02227\u0223/& 8!:\u0224! ).\u0FD6 &%2\u0225\"\"6\u02257\u0226/& 8!:\u0224! ).\u0FBF &%2\u0227\"\"6\u02277\u0228/& 8!:\u0229! ).\u0FA8 &%2\u022A\"\"6\u022A7\u022B/& 8!:\u0229! ).\u0F91 &%2\u022C\"\"6\u022C7\u022D/& 8!:\u022E! ).\u0F7A &%2\u022F\"\"6\u022F7\u0230/& 8!:\u022E! ).\u0F63 &%2\u0231\"\"6\u02317\u0232/& 8!:\u0233! ).\u0F4C &%2\u0234\"\"6\u02347\u0235/& 8!:\u0233! ).\u0F35 &%2\u0236\"\"6\u02367\u0237/& 8!:\u0238! ).\u0F1E &%2\u0239\"\"6\u02397\u023A/& 8!:\u0238! ).\u0F07 &%2\u023B\"\"6\u023B7\u023C/& 8!:\u023D! ).\u0EF0 &%2\u023E\"\"6\u023E7\u023F/& 8!:\u023D! ).\u0ED9 &%2\u0240\"\"6\u02407\u0241/& 8!:\u0242! ).\u0EC2 &%2\u0243\"\"6\u02437\u0244/& 8!:\u0242! ).\u0EAB &%2\u0245\"\"6\u02457\u0246/& 8!:\u0247! ).\u0E94 &%2\u0248\"\"6\u02487\u0249/& 8!:\u0247! ).\u0E7D &%2\u024A\"\"6\u024A7\u024B/& 8!:\u024C! ).\u0E66 &%2\u024D\"\"6\u024D7\u024E/& 8!:\u024C! ).\u0E4F &%2\u024F\"\"6\u024F7\u0250/& 8!:\u0251! ).\u0E38 &%2\u0252\"\"6\u02527\u0253/& 8!:\u0251! ).\u0E21 &%2\u0254\"\"6\u02547\u0255/& 8!:\u0256! ).\u0E0A &%2\u0257\"\"6\u02577\u0258/& 8!:\u0256! ).\u0DF3 &%2\u0259\"\"6\u02597\u025A/& 8!:\u025B! ).\u0DDC &%2\u025C\"\"6\u025C7\u025D/& 8!:\u025B! ).\u0DC5 &%2\u025E\"\"6\u025E7\u025F/& 8!:\u0260! ).\u0DAE &%2\u0261\"\"6\u02617\u0262/& 8!:\u0260! ).\u0D97 &%2\u0263\"\"6\u02637\u0264/& 8!:\u0260! ).\u0D80 &%2\u0265\"\"6\u02657\u0266/& 8!:\u0260! ).\u0D69 &%2\u0267\"\"6\u02677\u0268/& 8!:\u0269! ).\u0D52 &%2\u026A\"\"6\u026A7\u026B/& 8!:\u0269! ).\u0D3B &%2\u026C\"\"6\u026C7\u026D/& 8!:\u026E! ).\u0D24 &%2\u026F\"\"6\u026F7\u0270/& 8!:\u026E! ).\u0D0D &%2\u0271\"\"6\u02717\u0272/& 8!:\u0273! ).\u0CF6 &%2\u0274\"\"6\u02747\u0275/& 8!:\u0273! ).\u0CDF &%2\u0276\"\"6\u02767\u0277/& 8!:\u0278! ).\u0CC8 &%2\u0279\"\"6\u02797\u027A/& 8!:\u0278! ).\u0CB1 &%2\u027B\"\"6\u027B7\u027C/& 8!:\u027D! ).\u0C9A &%2\u027E\"\"6\u027E7\u027F/& 8!:\u027D! ).\u0C83 &%2\u0280\"\"6\u02807\u0281/& 8!:\u0282! ).\u0C6C &%2\u0283\"\"6\u02837\u0284/& 8!:\u0282! ).\u0C55 &%2\u0285\"\"6\u02857\u0286/& 8!:\u0282! ).\u0C3E &%2\u0287\"\"6\u02877\u0288/& 8!:\u0282! ).\u0C27 &%2\u0289\"\"6\u02897\u028A/& 8!:\u028B! ).\u0C10 &%2\u028C\"\"6\u028C7\u028D/& 8!:\u028B! ).\u0BF9 &%2\u028E\"\"6\u028E7\u028F/& 8!:\u0290! ).\u0BE2 &%2\u0291\"\"6\u02917\u0292/& 8!:\u0290! ).\u0BCB &%2\u0293\"\"6\u02937\u0294/& 8!:\u0295! ).\u0BB4 &%2\u0296\"\"6\u02967\u0297/& 8!:\u0295! ).\u0B9D &%2\u0298\"\"6\u02987\u0299/& 8!:\u029A! ).\u0B86 &%2\u029B\"\"6\u029B7\u029C/& 8!:\u029A! ).\u0B6F &%2\u029D\"\"6\u029D7\u029E/& 8!:\u029F! ).\u0B58 &%2\u02A0\"\"6\u02A07\u02A1/& 8!:\u029F! ).\u0B41 &%2\u02A2\"\"6\u02A27\u02A3/& 8!:\u01EE! ).\u0B2A &%2\u02A4\"\"6\u02A47\u02A5/& 8!:\u01EE! ).\u0B13 &%2\u02A6\"\"6\u02A67\u02A7/& 8!:\u02A8! ).\u0AFC &%2\u02A9\"\"6\u02A97\u02AA/& 8!:\u02A8! ).\u0AE5 &%2\u02AB\"\"6\u02AB7\u02AC/& 8!:\u02AD! ).\u0ACE &%2\u02AE\"\"6\u02AE7\u02AF/& 8!:\u02AD! ).\u0AB7 &%2\u02B0\"\"6\u02B07\u02B1/& 8!:\u02B2! ).\u0AA0 &%2\u02B3\"\"6\u02B37\u02B4/& 8!:\u02B2! ).\u0A89 &%2\u02B5\"\"6\u02B57\u02B6/& 8!:\u02B7! ).\u0A72 &%2\u02B8\"\"6\u02B87\u02B9/& 8!:\u02B7! ).\u0A5B &%2\u02BA\"\"6\u02BA7\u02BB/& 8!:\u02BC! ).\u0A44 &%2\u02BD\"\"6\u02BD7\u02BE/& 8!:\u02BC! ).\u0A2D &%2\u02BF\"\"6\u02BF7\u02C0/& 8!:\u02C1! ).\u0A16 &%2\u02C2\"\"6\u02C27\u02C3/& 8!:\u02C1! ).\u09FF &%2\u02C4\"\"6\u02C47\u02C5/& 8!:\u02C6! ).\u09E8 &%2\u02C7\"\"6\u02C77\u02C8/& 8!:\u02C6! ).\u09D1 &%2\u02C9\"\"6\u02C97\u02CA/& 8!:\u02CB! ).\u09BA &%2\u02CC\"\"6\u02CC7\u02CD/& 8!:\u02CB! ).\u09A3 &%2\u02CE\"\"6\u02CE7\u02CF/& 8!:\u02D0! ).\u098C &%2\u02D1\"\"6\u02D17\u02D2/& 8!:\u02D0! ).\u0975 &%2\u02D3\"\"6\u02D37\u02D4/& 8!:\u02D5! ).\u095E &%2\u02D6\"\"6\u02D67\u02D7/& 8!:\u02D5! ).\u0947 &%2\u02D8\"\"6\u02D87\u02D9/& 8!:\u02DA! ).\u0930 &%2\u02DB\"\"6\u02DB7\u02DC/& 8!:\u02DA! ).\u0919 &%2\u02DD\"\"6\u02DD7\u02DE/& 8!:\u02DF! ).\u0902 &%2\u02E0\"\"6\u02E07\u02E1/& 8!:\u02DF! ).\u08EB &%2\u02E2\"\"6\u02E27\u02E3/& 8!:\u02E4! ).\u08D4 &%2\u02E5\"\"6\u02E57\u02E6/& 8!:\u02E4! ).\u08BD &%2\u02E7\"\"6\u02E77\u02E8/& 8!:\u02E9! ).\u08A6 &%2\u02EA\"\"6\u02EA7\u02EB/& 8!:\u02E9! ).\u088F &%2\u02EC\"\"6\u02EC7\u02ED/& 8!:\u02EE! ).\u0878 &%2\u02EF\"\"6\u02EF7\u02F0/& 8!:\u02EE! ).\u0861 &%2\u02F1\"\"6\u02F17\u02F2/& 8!:\u02F3! ).\u084A &%2\u02F4\"\"6\u02F47\u02F5/& 8!:\u02F3! ).\u0833 &%2\u02F6\"\"6\u02F67\u02F7/& 8!:\u02F8! ).\u081C &%2\u02F9\"\"6\u02F97\u02FA/& 8!:\u02F8! ).\u0805 &%2\u02FB\"\"6\u02FB7\u02FC/& 8!:\u02FD! ).\u07EE &%2\u02FE\"\"6\u02FE7\u02FF/& 8!:\u02FD! ).\u07D7 &%2\u0300\"\"6\u03007\u0301/& 8!:\u0302! ).\u07C0 &%2\u0303\"\"6\u03037\u0304/& 8!:\u0302! ).\u07A9 &%2\u0305\"\"6\u03057\u0306/& 8!:\u0307! ).\u0792 &%2\u0308\"\"6\u03087\u0309/& 8!:\u0307! ).\u077B &%2\u030A\"\"6\u030A7\u030B/& 8!:\u030C! ).\u0764 &%2\u030D\"\"6\u030D7\u030E/& 8!:\u030C! ).\u074D &%2\u030F\"\"6\u030F7\u0310/& 8!:\u0311! ).\u0736 &%2\u0312\"\"6\u03127\u0313/& 8!:\u0311! ).\u071F &%2\u0314\"\"6\u03147\u0315/& 8!:\u0316! ).\u0708 &%2\u0317\"\"6\u03177\u0318/& 8!:\u0316! ).\u06F1 &%2\u0319\"\"6\u03197\u031A/& 8!:\u031B! ).\u06DA &%2\u031C\"\"6\u031C7\u031D/& 8!:\u031B! ).\u06C3 &%2\u031E\"\"6\u031E7\u031F/& 8!:\u0320! ).\u06AC &%2\u0321\"\"6\u03217\u0322/& 8!:\u0320! ).\u0695 &%2\u0323\"\"6\u03237\u0324/& 8!:\u0325! ).\u067E &%2\u0326\"\"6\u03267\u0327/& 8!:\u0325! ).\u0667 &%2\u0328\"\"6\u03287\u0329/& 8!:\u032A! ).\u0650 &%2\u032B\"\"6\u032B7\u032C/& 8!:\u032A! ).\u0639 &%2\u032D\"\"6\u032D7\u032E/& 8!:\u032F! ).\u0622 &%2\u0330\"\"6\u03307\u0331/& 8!:\u032F! ).\u060B &%2\u0332\"\"6\u03327\u0333/& 8!:\u0334! ).\u05F4 &%2\u0335\"\"6\u03357\u0336/& 8!:\u0334! ).\u05DD &%2\u0337\"\"6\u03377\u0338/& 8!:\u0339! ).\u05C6 &%2\u033A\"\"6\u033A7\u033B/& 8!:\u0339! ).\u05AF &%2\u033C\"\"6\u033C7\u033D/& 8!:\u033E! ).\u0598 &%2\u033F\"\"6\u033F7\u0340/& 8!:\u033E! ).\u0581 &%2\u0341\"\"6\u03417\u0342/& 8!:\u0343! ).\u056A &%2\u0344\"\"6\u03447\u0345/& 8!:\u0343! ).\u0553 &%2\u0346\"\"6\u03467\u0347/& 8!:\u0348! ).\u053C &%2\u0349\"\"6\u03497\u034A/& 8!:\u0348! ).\u0525 &%2\u034B\"\"6\u034B7\u034C/& 8!:\u034D! ).\u050E &%2\u034E\"\"6\u034E7\u034F/& 8!:\u034D! ).\u04F7 &%2\u0350\"\"6\u03507\u0351/& 8!:\u0352! ).\u04E0 &%2\u0353\"\"6\u03537\u0354/& 8!:\u0352! ).\u04C9 &%2\u0355\"\"6\u03557\u0356/& 8!:\u0357! ).\u04B2 &%2\u0358\"\"6\u03587\u0359/& 8!:\u0357! ).\u049B &%2\u035A\"\"6\u035A7\u035B/& 8!:\u035C! ).\u0484 &%2\u035D\"\"6\u035D7\u035E/& 8!:\u035C! ).\u046D &%2\u035F\"\"6\u035F7\u0360/& 8!:\u0361! ).\u0456 &%2\u0362\"\"6\u03627\u0363/& 8!:\u0361! ).\u043F &%2\u0364\"\"6\u03647\u0365/& 8!:\u0366! ).\u0428 &%2\u0367\"\"6\u03677\u0368/& 8!:\u0366! ).\u0411 &%2\u0369\"\"6\u03697\u036A/& 8!:\u036B! ).\u03FA &%2\u036C\"\"6\u036C7\u036D/& 8!:\u036B! ).\u03E3 &%2\u036E\"\"6\u036E7\u036F/& 8!:\u0370! ).\u03CC &%2\u0371\"\"6\u03717\u0372/& 8!:\u0370! ).\u03B5 &%2\u0373\"\"6\u03737\u0374/& 8!:\u0375! ).\u039E &%2\u0376\"\"6\u03767\u0377/& 8!:\u0375! ).\u0387 &%2\u0378\"\"6\u03787\u0379/& 8!:\u037A! ).\u0370 &%2\u037B\"\"6\u037B7\u037C/& 8!:\u037A! ).\u0359 &%2\u037D\"\"6\u037D7\u037E/& 8!:\u037F! ).\u0342 &%2\u0380\"\"6\u03807\u0381/& 8!:\u037F! ).\u032B &%2\u0382\"\"6\u03827\u0383/& 8!:\u0384! ).\u0314 &%2\u0385\"\"6\u03857\u0386/& 8!:\u0384! ).\u02FD &%2\u0387\"\"6\u03877\u0388/& 8!:\u0389! ).\u02E6 &%2\u038A\"\"6\u038A7\u038B/& 8!:\u0389! ).\u02CF &%2\u038C\"\"6\u038C7\u038D/& 8!:\u0389! ).\u02B8 &%2\u038E\"\"6\u038E7\u038F/& 8!:\u0389! ).\u02A1 &%2\u0390\"\"6\u03907\u0391/& 8!:\u0392! ).\u028A &%2\u0393\"\"6\u03937\u0394/& 8!:\u0392! ).\u0273 &%2\u0395\"\"6\u03957\u0396/& 8!:\u0397! ).\u025C &%2\u0398\"\"6\u03987\u0399/& 8!:\u0397! ).\u0245 &%2\u039A\"\"6\u039A7\u039B/& 8!:\u039C! ).\u022E &%2\u039D\"\"6\u039D7\u039E/& 8!:\u039C! ).\u0217 &%2\u039F\"\"6\u039F7\u03A0/& 8!:\u03A1! ).\u0200 &%2\u03A2\"\"6\u03A27\u03A3/& 8!:\u03A1! ).\u01E9 &%2\u03A4\"\"6\u03A47\u03A5/& 8!:\u03A6! ).\u01D2 &%2\u03A7\"\"6\u03A77\u03A8/& 8!:\u03A6! ).\u01BB &%2\u03A9\"\"6\u03A97\u03AA/& 8!:\u03AB! ).\u01A4 &%2\u03AC\"\"6\u03AC7\u03AD/& 8!:\u03AB! ).\u018D &%2\u03AE\"\"6\u03AE7\u03AF/& 8!:\u03B0! ).\u0176 &%2\u03B1\"\"6\u03B17\u03B2/& 8!:\u03B0! ).\u015F &%2\u03B3\"\"6\u03B37\u03B4/& 8!:\u03B5! ).\u0148 &%2\u03B6\"\"6\u03B67\u03B7/& 8!:\u03B5! ).\u0131 &%2\u03B8\"\"6\u03B87\u03B9/& 8!:\u03BA! ).\u011A &%2\u03BB\"\"6\u03BB7\u03BC/& 8!:\u03BA! ).\u0103 &%2\u03BD\"\"6\u03BD7\u03BE/& 8!:\u03BF! ).\xEC &%2\u03C0\"\"6\u03C07\u03C1/& 8!:\u03BF! ).\xD5 &%2\u03C2\"\"6\u03C27\u03C3/& 8!:\u03C4! ).\xBE &%2\u03C5\"\"6\u03C57\u03C6/& 8!:\u03C4! ).\xA7 &%2\u03C7\"\"6\u03C77\u03C8/& 8!:\u03C9! ).\x90 &%2\u03CA\"\"6\u03CA7\u03CB/& 8!:\u03C9! ).y &%2\u03CC\"\"6\u03CC7\u03CD/& 8!:\u03CE! ).b &%2\u03CF\"\"6\u03CF7\u03D0/& 8!:\u03CE! ).K &%2\u03D1\"\"6\u03D17\u03D2/& 8!:\u03D3! ).4 &%2\u03D4\"\"6\u03D47\u03D5/& 8!:\u03D3! )=.\" 7\xFF"),
        peg$decode("%2\u03D6\"\"6\u03D67\u03D7/S#;H/J$;H/A$;H/8$;3.\" &\"/*$8%:\u03D8%##\"!)(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\u03D6\"\"6\u03D67\u03D7/q#;H/h$;H/_$;H/V$;H/M$;H/D$;H/;$;3.\" &\"/-$8(:\u03D9(&&%$#\"!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\u03D6\"\"6\u03D67\u03D7/]#;H/T$;H/K$;H/B$;H/9$;3.\" &\"/+$8&:\u03DA&$$#\"!)(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\u03D6\"\"6\u03D67\u03D7/\x85#;H/|$;H/s$;H/j$;H/a$;H/X$;H/O$;H/F$;H/=$;3.\" &\"//$8*:\u03DB*(('&%$#\"!)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("<;Q.5 &;U./ &;S.) &;T.# &;R=.\" 7\u03DC"),
        peg$decode("<;j./ &;g.) &;h.# &;i=.\" 7\u03DD"),
        peg$decode("<%2\u03DF\"\"6\u03DF7\u03E0/& 8!:\u03E1! ).4 &%2\u03E2\"\"6\u03E27\u03E3/& 8!:\u03E1! )=.\" 7\u03DE"),
        peg$decode("<%2\u03E5\"\"6\u03E57\u03E6/& 8!:\u03E7! ).4 &%2\u03E8\"\"6\u03E87\u03E9/& 8!:\u03E7! )=.\" 7\u03E4"),
        peg$decode("<%2\u03EB\"\"6\u03EB7\u03EC/& 8!:\u03ED! ).4 &%2\u03EE\"\"6\u03EE7\u03EF/& 8!:\u03ED! )=.\" 7\u03EA"),
        peg$decode("<%2\u03F1\"\"6\u03F17\u03F2/& 8!:\u03F3! ).4 &%2\u03F4\"\"6\u03F47\u03F5/& 8!:\u03F3! )=.\" 7\u03F0"),
        peg$decode("<%2\u03F7\"\"6\u03F77\u03F8/& 8!:\u03F9! ).4 &%2\u03FA\"\"6\u03FA7\u03FB/& 8!:\u03F9! )=.\" 7\u03F6"),
        peg$decode("<%2\xF9\"\"6\xF97\xFA/& 8!:\u03FD! ).4 &%2\u03FE\"\"6\u03FE7\u03FF/& 8!:\u03FD! )=.\" 7\u03FC"),
        peg$decode("<%2\u0401\"\"6\u04017\u0402/& 8!:\u0403! ).4 &%2\u0404\"\"6\u04047\u0405/& 8!:\u0403! )=.\" 7\u0400"),
        peg$decode("<%2\u0407\"\"6\u04077\u0408/& 8!:\u0409! ).4 &%2\u040A\"\"6\u040A7\u040B/& 8!:\u0409! )=.\" 7\u0406"),
        peg$decode("<%2\u040D\"\"6\u040D7\u040E/& 8!:\u040F! ).4 &%2\u0410\"\"6\u04107\u0411/& 8!:\u040F! )=.\" 7\u040C"),
        peg$decode("<%2\u0413\"\"6\u04137\u0414/& 8!:\u0415! ).b &%2\u0416\"\"6\u04167\u0417/& 8!:\u0415! ).K &%2\u0418\"\"6\u04187\u0419/& 8!:\u0415! ).4 &%2\u041A\"\"6\u041A7\u041B/& 8!:\u0415! )=.\" 7\u0412"),
        peg$decode("<%2\u041D\"\"6\u041D7\u041E/& 8!:\u041F! ).b &%2\u0420\"\"6\u04207\u0421/& 8!:\u041F! ).K &%2\u0422\"\"6\u04227\u0423/& 8!:\u041F! ).4 &%2\u0424\"\"6\u04247\u0425/& 8!:\u041F! )=.\" 7\u041C"),
        peg$decode("<%2\u0427\"\"6\u04277\u0428/& 8!:\u0429! ).b &%2\u042A\"\"6\u042A7\u042B/& 8!:\u0429! ).K &%2\u042C\"\"6\u042C7\u042D/& 8!:\u0429! ).4 &%2\u042E\"\"6\u042E7\u042F/& 8!:\u0429! )=.\" 7\u0426"),
        peg$decode("<%2\u0431\"\"6\u04317\u0432/& 8!:\u0433! ).b &%2\u0434\"\"6\u04347\u0435/& 8!:\u0433! ).K &%2\u0436\"\"6\u04367\u0437/& 8!:\u0433! ).4 &%2\u0438\"\"6\u04387\u0439/& 8!:\u0433! )=.\" 7\u0430"),
        peg$decode("<%2\u043B\"\"6\u043B7\u043C/& 8!:\u043D! ).b &%2\u043E\"\"6\u043E7\u043F/& 8!:\u043D! ).K &%2\u0440\"\"6\u04407\u0441/& 8!:\u043D! ).4 &%2\u0442\"\"6\u04427\u0443/& 8!:\u043D! )=.\" 7\u043A"),
        peg$decode("<%2\u0445\"\"6\u04457\u0446/& 8!:\u0447! ).b &%2\u0448\"\"6\u04487\u0449/& 8!:\u0447! ).K &%2\u044A\"\"6\u044A7\u044B/& 8!:\u0447! ).4 &%2\u044C\"\"6\u044C7\u044D/& 8!:\u0447! )=.\" 7\u0444"),
        peg$decode("<;X.) &;Y.# &;Z=.\" 7\u044E"),
        peg$decode("<;[.) &;\\.# &;]=.\" 7\u044F"),
        peg$decode("<;^.) &;_.# &;`=.\" 7\u0450"),
        peg$decode("<;a.; &;b.5 &;c./ &;d.) &;e.# &;f=.\" 7\u0451"),
        peg$decode("2\u0452\"\"6\u04527\u0453.5 &2\u0454\"\"6\u04547\u0455.) &2\u0456\"\"6\u04567\u0457"),
        peg$decode("%;k/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;D/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:-(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("<%2\u0459\"\"6\u04597\u045A/\x87#;3.\" &\"/y$2)\"\"6)7*/j$;3.\" &\"/\\$;V/S$;3.\" &\"/E$2+\"\"6+7,/6$;3.\" &\"/($8(:\u045B(!#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0458"),
        peg$decode(";m.0 &$;l/&#0#*;l&&&#"),
        peg$decode("%2\u045C\"\"6\u045C7\u045D/a#;3.\" &\"/S$;n.\" &\"/E$;3.\" &\"/7$2\u045E\"\"6\u045E7\u045F/($8%:\u0460%!\")(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%;L/7#2\u0461\"\"6\u04617\u0462/($8\":\u0463\"!!)(\"'#&'#"),
        peg$decode(";t./ &;u.) &;E.# &;D"),
        peg$decode("2\u0464\"\"6\u04647\u0465.\u02E1 &2\u0466\"\"6\u04667\u0467.\u02D5 &2\u0468\"\"6\u04687\u0469.\u02C9 &2\u046A\"\"6\u046A7\u046B.\u02BD &2\u046C\"\"6\u046C7\u046D.\u02B1 &2\u046E\"\"6\u046E7\u046F.\u02A5 &2\u0470\"\"6\u04707\u0471.\u0299 &2\u0472\"\"6\u04727\u0473.\u028D &2\u0474\"\"6\u04747\u0475.\u0281 &2\u0476\"\"6\u04767\u0477.\u0275 &2\u0478\"\"6\u04787\u0479.\u0269 &2\u047A\"\"6\u047A7\u047B.\u025D &2\u047C\"\"6\u047C7\u047D.\u0251 &2\u047E\"\"6\u047E7\u047F.\u0245 &2\u0480\"\"6\u04807\u0481.\u0239 &2\u0482\"\"6\u04827\u0483.\u022D &2\u0484\"\"6\u04847\u0485.\u0221 &2\u0486\"\"6\u04867\u0487.\u0215 &2\u0488\"\"6\u04887\u0489.\u0209 &2\u048A\"\"6\u048A7\u048B.\u01FD &2\u048C\"\"6\u048C7\u048D.\u01F1 &2\u048E\"\"6\u048E7\u048F.\u01E5 &2\u0490\"\"6\u04907\u0491.\u01D9 &2\u0492\"\"6\u04927\u0493.\u01CD &2\u0494\"\"6\u04947\u0495.\u01C1 &2\u0496\"\"6\u04967\u0497.\u01B5 &2\u0498\"\"6\u04987\u0499.\u01A9 &2\u049A\"\"6\u049A7\u049B.\u019D &2\u049C\"\"6\u049C7\u049D.\u0191 &2\u049E\"\"6\u049E7\u049F.\u0185 &2\u04A0\"\"6\u04A07\u04A1.\u0179 &2\u04A2\"\"6\u04A27\u04A3.\u016D &2\u04A4\"\"6\u04A47\u04A5.\u0161 &2\u04A6\"\"6\u04A67\u04A7.\u0155 &2\u04A8\"\"6\u04A87\u04A9.\u0149 &2\u04AA\"\"6\u04AA7\u04AB.\u013D &2\u04AC\"\"6\u04AC7\u04AD.\u0131 &2\u04AE\"\"6\u04AE7\u04AF.\u0125 &2\u04B0\"\"6\u04B07\u04B1.\u0119 &2\u04B2\"\"6\u04B27\u04B3.\u010D &2\u04B4\"\"6\u04B47\u04B5.\u0101 &2\u04B6\"\"6\u04B67\u04B7.\xF5 &2\u04B8\"\"6\u04B87\u04B9.\xE9 &2\u04BA\"\"6\u04BA7\u04BB.\xDD &2\u04BC\"\"6\u04BC7\u04BD.\xD1 &2\u04BE\"\"6\u04BE7\u04BF.\xC5 &2\u04C0\"\"6\u04C07\u04C1.\xB9 &2\u04C2\"\"6\u04C27\u04C3.\xAD &2\u04C4\"\"6\u04C47\u04C5.\xA1 &2\u04C6\"\"6\u04C67\u04C7.\x95 &2\u04C8\"\"6\u04C87\u04C9.\x89 &2\u04CA\"\"6\u04CA7\u04CB.} &2\u04CC\"\"6\u04CC7\u04CD.q &2\u04CE\"\"6\u04CE7\u04CF.e &2\u04D0\"\"6\u04D07\u04D1.Y &2\u04D2\"\"6\u04D27\u04D3.M &2\u04D4\"\"6\u04D47\u04D5.A &2\u04D6\"\"6\u04D67\u04D7.5 &2\u04D8\"\"6\u04D87\u04D9.) &2\u04DA\"\"6\u04DA7\u04DB"),
        peg$decode("<%;r/' 8!:\u04DD!! )=.\" 7\u04DC"),
        peg$decode("<%2\u04DF\"\"6\u04DF7\u04E0/1#;K/($8\":\u04E1\"! )(\"'#&'#.A &%2\u04E2\"\"6\u04E27\u04E3/1#;K/($8\":\u04E4\"! )(\"'#&'#=.\" 7\u04DE"),
        peg$decode("<%2\u04E6\"\"6\u04E67\u04E7/1#;K/($8\":\u04E8\"! )(\"'#&'#.A &%2\u04E9\"\"6\u04E97\u04EA/1#;K/($8\":\u04EB\"! )(\"'#&'#=.\" 7\u04E5"),
        peg$decode("<%2\u04ED\"\"6\u04ED7\u04EE/\xAB#;3.\" &\"/\x9D$2)\"\"6)7*/\x8E$;3.\" &\"/\x80$2\u045C\"\"6\u045C7\u045D/q$;3.\" &\"/c$$;\x7F0#*;\x7F&/S$;3.\" &\"/E$2\u04EF\"\"6\u04EF7\u04F0/6$;3.\" &\"/($8*:\u04F1*!#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u04EC"),
        peg$decode("<%2\u04F3\"\"6\u04F37\u04F4/\xAC#;3.\" &\"/\x9E$2)\"\"6)7*/\x8F$;3.\" &\"/\x81$2\u045C\"\"6\u045C7\u045D/r$;3.\" &\"/d$$;\x840#*;\x84&/T$;3.\" &\"/F$2\u04EF\"\"6\u04EF7\u04F0/7$;3.\" &\"/)$8*:-*\")#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u04F2"),
        peg$decode("<%2\u04F6\"\"6\u04F67\u04F7/\xAC#;3.\" &\"/\x9E$2)\"\"6)7*/\x8F$;3.\" &\"/\x81$2\u045C\"\"6\u045C7\u045D/r$;3.\" &\"/d$$;\x840#*;\x84&/T$;3.\" &\"/F$2\u04EF\"\"6\u04EF7\u04F0/7$;3.\" &\"/)$8*:-*\")#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u04F5"),
        peg$decode("<%2\u04F9\"\"6\u04F97\u04FA/\xAC#;3.\" &\"/\x9E$2)\"\"6)7*/\x8F$;3.\" &\"/\x81$2\u045C\"\"6\u045C7\u045D/r$;3.\" &\"/d$$;\x840#*;\x84&/T$;3.\" &\"/F$2\u04EF\"\"6\u04EF7\u04F0/7$;3.\" &\"/)$8*:-*\")#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u04F8"),
        peg$decode("<;v./ &;w.) &;x.# &;y=.\" 7\u04FB"),
        peg$decode("2\u04FC\"\"6\u04FC7\u04FD.) &2\u04FE\"\"6\u04FE7\u04FF"),
        peg$decode("%;{/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;\x87/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:-(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\u0459\"\"6\u04597\u045A.) &2\u0500\"\"6\u05007\u0501"),
        peg$decode("%;}/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;V/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:-(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode(";~.# &;|"),
        peg$decode("2\u0502\"\"6\u05027\u0503"),
        peg$decode("%;\x80/S#;3.\" &\"/E$2+\"\"6+7,/6$;3.\" &\"/($8$:\u0504$!#)($'#(#'#(\"'#&'#"),
        peg$decode("2\u0505\"\"6\u05057\u0506.) &2\u0507\"\"6\u05077\u0508"),
        peg$decode(";\x81.# &;\x82"),
        peg$decode("%;\x83/k#;3.\" &\"/]$2)\"\"6)7*/N$;3.\" &\"/@$;D/7$;3.\" &\"/)$8&:-&\"%!)(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("%2\u045C\"\"6\u045C7\u045D/q#;3.\" &\"/c$$;\x840#*;\x84&/S$;3.\" &\"/E$2\u045E\"\"6\u045E7\u045F/6$;3.\" &\"/($8&:\u0509&!#)(&'#(%'#($'#(#'#(\"'#&'#"),
        peg$decode("2\u0464\"\"6\u04647\u0465.\u0209 &2\u050A\"\"6\u050A7\u050B.\u01FD &2\u050C\"\"6\u050C7\u050D.\u01F1 &2\u050E\"\"6\u050E7\u050F.\u01E5 &2\u0510\"\"6\u05107\u0511.\u01D9 &2\u0512\"\"6\u05127\u0513.\u01CD &2\u0514\"\"6\u05147\u0515.\u01C1 &2\u0516\"\"6\u05167\u0517.\u01B5 &2\u0518\"\"6\u05187\u0519.\u01A9 &2\u0478\"\"6\u04787\u0479.\u019D &2\u051A\"\"6\u051A7\u051B.\u0191 &2\u051C\"\"6\u051C7\u051D.\u0185 &2\u051E\"\"6\u051E7\u051F.\u0179 &2\u0520\"\"6\u05207\u0521.\u016D &2\u0522\"\"6\u05227\u0523.\u0161 &2{\"\"6{7|.\u0155 &2\u0524\"\"6\u05247\u0525.\u0149 &2\u0526\"\"6\u05267\u0527.\u013D &2\u0528\"\"6\u05287\u0529.\u0131 &2\u052A\"\"6\u052A7\u052B.\u0125 &2\u052C\"\"6\u052C7\u052D.\u0119 &2\u052E\"\"6\u052E7\u052F.\u010D &2\u0530\"\"6\u05307\u0531.\u0101 &2\u04A2\"\"6\u04A27\u04A3.\xF5 &2\u0532\"\"6\u05327\u0533.\xE9 &2\u0534\"\"6\u05347\u0535.\xDD &2\u0536\"\"6\u05367\u0537.\xD1 &2\u0538\"\"6\u05387\u0539.\xC5 &2\u053A\"\"6\u053A7\u053B.\xB9 &2\u053C\"\"6\u053C7\u053D.\xAD &2\u053E\"\"6\u053E7\u053F.\xA1 &2\u0540\"\"6\u05407\u0541.\x95 &2\u0542\"\"6\u05427\u0543.\x89 &2\u0544\"\"6\u05447\u0545.} &2\u0546\"\"6\u05467\u0547.q &2\u0548\"\"6\u05487\u0549.e &2\u054A\"\"6\u054A7\u054B.Y &2\u054C\"\"6\u054C7\u054D.M &2\u054E\"\"6\u054E7\u054F.A &2\u0550\"\"6\u05507\u0551.5 &2\u0552\"\"6\u05527\u0553.) &2\u0554\"\"6\u05547\u0555"),
        peg$decode("<%;\x86/' 8!:\u0556!! )=.\" 7\u04DC"),
        peg$decode("<%;\x86/' 8!:\u0557!! )=.\" 7\u04DC"),
        peg$decode("<%;D/\x88#;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;\x85/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8(:\u0559(\"'#)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0558"),
        peg$decode("%2\u055A\"\"6\u055A7\u055B/\x9F#;3.\" &\"/\x91$;D/\x88$;3.\" &\"/z$2)\"\"6)7*/k$;3.\" &\"/]$;F/T$;3.\" &\"/F$2+\"\"6+7,/7$;3.\" &\"/)$8*:\u055C*\"'#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#")
      ],

      peg$currPos          = 0,
      peg$savedPos         = 0,
      peg$posDetailsCache  = [{ line: 1, column: 1 }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [],
      peg$silentFails      = 0,

      peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos], p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos),
        endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    var bc = new Array(s.length), i;

    for (i = 0; i < s.length; i++) {
      bc[i] = s.charCodeAt(i) - 32;
    }

    return bc;
  }

  function peg$parseRule(index) {
    var bc    = peg$bytecode[index],
        ip    = 0,
        ips   = [],
        end   = bc.length,
        ends  = [],
        stack = [],
        params, i;

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(void 0);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
            for (i = 0; i < bc[ip + 3]; i++) {
              params[i] = stack[stack.length - 1 - params[i]];
            }

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    return stack[0];
  }



    // used in cycles and stripes
    function signflip({ term, value, location }) {
      return { term, value: value * -1, location };
    }



  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse:       peg$parse
};
